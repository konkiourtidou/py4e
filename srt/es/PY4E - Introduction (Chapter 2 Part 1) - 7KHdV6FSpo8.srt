1
00:00:00,707 --> 00:00:02,963
- Hola y bienvenido al Capítulo 2.

2
00:00:02,963 --> 00:00:04,813
Ahora vamos a continuar
Hablando acerca de 

3
00:00:04,813 --> 00:00:07,740
los bloques fundamentales de 
Python, variables, constantes,

4
00:00:07,740 --> 00:00:10,158
declaraciones, expresiones, etcétera.

5
00:00:10,158 --> 00:00:12,524
Lo primero sobre lo que debemos 
hablar es acerca de las constantes.

6
00:00:12,524 --> 00:00:14,441
Estas son solo cosas
que llamamos constantes

7
00:00:14,441 --> 00:00:15,824
porque no cambian.

8
00:00:15,824 --> 00:00:18,087
Hay números, cadenas, etcétera,

9
00:00:18,087 --> 00:00:20,926
y los utilizamos para
básicamente comenzar algunos cálculos 

10
00:00:20,926 --> 00:00:25,508
o, ya sabes, si algo
es mayor a 40 horas

11
00:00:25,508 --> 00:00:27,074
algo va a ocurrir,

12
00:00:27,074 --> 00:00:29,432
entonces 40 es la constante en esa situación.

13
00:00:29,432 --> 00:00:34,056
Entonces, tenemos 123, tenemos
98.6, tenemos 'Hello World',

14
00:00:34,056 --> 00:00:36,180
que es una cadena por medio de
la delimitación entre comillas,

15
00:00:36,180 --> 00:00:39,023
vamos pasando cada una de estas cosas
a la función imprimir,

16
00:00:39,023 --> 00:00:40,950
y un efecto secundario de la función imprimir

17
00:00:40,950 --> 00:00:42,580
es lo que vemos como resultado.

18
00:00:42,580 --> 00:00:46,814
Entonces print(123), imprime 123,
print(98.6), lo imprime.

19
00:00:46,814 --> 00:00:49,905
Entonces estas son realmente 
una sintaxis de constantes

20
00:00:49,905 --> 00:00:52,591
y sin las constantes no 
podemos escribir realmente mucho 

21
00:00:52,591 --> 00:00:53,796
de absolutamente nada.

22
00:00:53,796 --> 00:00:56,546
La otra noción fundamental 

23
00:00:56,546 --> 00:00:59,517
de cualquier lenguaje de programación
son las palabras reservadas,

24
00:00:59,517 --> 00:01:01,119
y como dije anteriormente, las palabras reservadas

25
00:01:01,119 --> 00:01:04,555
son esas palabras especiales que 
Python está escuchando 

26
00:01:04,555 --> 00:01:07,088
y hay significados muy especiales,

27
00:01:07,088 --> 00:01:10,194
así que cuando Python ve if, no
es una palabra cualquiera,

28
00:01:10,194 --> 00:01:15,176
significa cómo Python implementa
una ejecución condicional.

29
00:01:15,176 --> 00:01:18,473
Las variables son el tercer bloque fundamental,

30
00:01:18,473 --> 00:01:21,986
y esa es la manera que puedes pedirle a Python

31
00:01:21,986 --> 00:01:24,932
que asigne un pedazo de memoria
y luego darle un nombre,

32
00:01:24,932 --> 00:01:26,652
y puedes poner cosas ahí dentro.

33
00:01:26,652 --> 00:01:28,209
A veces puedes poner un valor.

34
00:01:28,209 --> 00:01:29,309
Más adelante veremos,

35
00:01:29,309 --> 00:01:31,529
haremos colecciones en 
los capítulos ocho y nueve.

36
00:01:31,529 --> 00:01:34,138
Vamos a ver que más de un valor 

37
00:01:34,138 --> 00:01:35,656
puede ser ubicado en una variable.

38
00:01:35,656 --> 00:01:38,257
Y la variable, como
controlamos la variable,

39
00:01:38,257 --> 00:01:40,314
es a través de una sentencia de asignación,

40
00:01:40,314 --> 00:01:41,398
y como dije antes,

41
00:01:41,398 --> 00:01:43,445
es importante contemplar a la 
sentencia de asignación 

42
00:01:43,445 --> 00:01:45,451
como si tuviera una flecha apuntándole.

43
00:01:45,451 --> 00:01:48,820
Entonces esto no está diciendo x para
todo el tiempo es igual a 12.2,

44
00:01:48,820 --> 00:01:52,080
lo que está diciendo es 
toma 12.2, encuentra un lugar,

45
00:01:52,080 --> 00:01:55,095
encuentra algo de memoria en la
computadora Sr. Python,

46
00:01:55,095 --> 00:01:57,376
dale una identificación x, nosotros podemos escoger la x,

47
00:01:57,376 --> 00:02:00,944
esa es la parte
variable, la escogimos, correcto,

48
00:02:00,944 --> 00:02:04,246
y luego se le agrega el 12 dentro, y
luego lo mismo es verdadero para 14,

49
00:02:04,246 --> 00:02:09,079
encuentra otro lugar, dale una identificación
y luego pon un 14 ahí dentro.

50
00:02:09,079 --> 00:02:12,139
Entonces, piensa en esto como una 
flecha cada vez que ves 

51
00:02:12,139 --> 00:02:18,462
esa igualdad, la asignación,
en una sentencia de asignación. 

52
00:02:18,462 --> 00:02:21,251
Ahora, estas variables contienen un solo valor.

53
00:02:21,251 --> 00:02:24,905
Entonces si tenemos estas 
tres sentencias, estas dos,

54
00:02:24,905 --> 00:02:26,656
y luego la tercera se ejecuta, 

55
00:02:26,656 --> 00:02:29,779
lo que está diciendo es que ponga 100 en x, pero
eso borra el valor anterior

56
00:02:29,779 --> 00:02:32,831
de 12.2 y lo reescribe con 100,

57
00:02:32,831 --> 00:02:34,941
entonces podemos cambiar las variables;

58
00:02:34,941 --> 00:02:40,098
esa es otro motivo por el cual 
las llamamos variables.

59
00:02:40,098 --> 00:02:42,148
Existen algunos nombres,
ahora incluimos algunas reglas 

60
00:02:42,148 --> 00:02:43,218
para componer nombres de variables.

61
00:02:43,218 --> 00:02:45,629
Puedes comenzar con 
una letra o un guión bajo.

62
00:02:45,629 --> 00:02:48,421
No acostumbramos a hacerlo ya que 
los programadores estándar utilizan el guión bajo,

63
00:02:48,421 --> 00:02:51,817
solemos reservar esos para las variables 

64
00:02:51,817 --> 00:02:54,386
que utilizamos para comunicarnos 
con el mismo Python,

65
00:02:54,386 --> 00:02:55,632
entonces cuando estamos componiendo una variable,

66
00:02:55,632 --> 00:02:59,391
no solemos utilizar un guión bajo
como el primer caracter.

67
00:02:59,391 --> 00:03:02,608
Se pueden tener letras y 
números y guiones bajos 

68
00:03:02,608 --> 00:03:05,158
luego del primer caracter 
y se distinguen las mayúsculas y minúsculas 

69
00:03:05,158 --> 00:03:06,503
pero no es una buena idea realmente 

70
00:03:06,503 --> 00:03:10,636
utilizar una mayúscula como un único diferenciador. 

71
00:03:10,636 --> 00:03:15,737
Entonces, en este caso, spam,
eggs, spam23, y _speed,

72
00:03:15,737 --> 00:03:16,763
son completamente válidos.

73
00:03:16,763 --> 00:03:18,417
Probablemente no utilizaríamos este 

74
00:03:18,417 --> 00:03:20,057
a menos que estemos realmente haciéndolo

75
00:03:20,057 --> 00:03:21,828
porque Python nos dijo
que utilizáramos esa variable.

76
00:03:21,828 --> 00:03:24,407
23spam comienza con un 
número, #sign comienza así

77
00:03:24,407 --> 00:03:28,373
y el punto no es un 
caracter válido para una variable.

78
00:03:28,373 --> 00:03:33,011
Y spam, Spam, y SPAM son diferentes,

79
00:03:33,011 --> 00:03:35,094
pero esto es algo que realmente no quieres 

80
00:03:35,094 --> 00:03:38,475
esto de depender demasiado,

81
00:03:38,475 --> 00:03:40,045
así que esa es simplemente la regla para los nombres.

82
00:03:40,045 --> 00:03:42,196
Se suele comenzar con una letra 

83
00:03:42,196 --> 00:03:44,041
y luego utilizar letras, 
números, y guiones bajos.

84
00:03:44,041 --> 00:03:45,762
Los guiones bajos, salvo como primer caracter, 

85
00:03:45,762 --> 00:03:50,641
son en general bastante comunes y 
los vas a ver muy frecuentemente.

86
00:03:50,641 --> 00:03:52,319
Ahora, cuando estamos escogiendo nombres para las variables,

87
00:03:52,319 --> 00:03:54,503
una de las cosas de las variables,
es que podemos escoger el nombre;

88
00:03:54,503 --> 00:03:57,678
podemos escoger el nombre
x, escoger el nombre y,

89
00:03:57,678 --> 00:03:59,341
Y entonces a veces nos gustan más cortos

90
00:03:59,341 --> 00:04:01,292
pero a veces podemos querer que sean descriptivos,

91
00:04:01,292 --> 00:04:04,696
y la noción de hacer que 
las variables sean descriptivas

92
00:04:04,696 --> 00:04:07,209
suele ser confuso para los alumnos principiantes.

93
00:04:07,209 --> 00:04:09,681
A veces realmente ayuda,

94
00:04:09,681 --> 00:04:11,558
si vas a tener una línea de texto

95
00:04:11,558 --> 00:04:14,236
y le pones nombre a la línea 
de la variable, eso es genial, 

96
00:04:14,236 --> 00:04:16,002
porque la próxima persona que 
lea tu programa va a decir,

97
00:04:16,002 --> 00:04:17,874
oh, esto debe estar en esta línea de texto.

98
00:04:17,874 --> 00:04:21,404
Mientras que, puede al mismo tiempo volverse
engañoso, esa línea,

99
00:04:21,404 --> 00:04:24,423
el nombre de la variable,
de alguna manera tiene un significado.

100
00:04:24,423 --> 00:04:26,248
Entonces a veces tendremos 
incluso variables singulares

101
00:04:26,248 --> 00:04:29,539
y variables plurales,
como amigo y amigos,

102
00:04:29,539 --> 00:04:30,696
sabes como está en plural?

103
00:04:30,696 --> 00:04:33,472
Python sabe acerca de 
singular y plural?

104
00:04:33,472 --> 00:04:34,755
Y la respuesta es no.

105
00:04:34,755 --> 00:04:38,050
Así que a veces escogemos 
variables que no tienen sentido alguno,

106
00:04:38,050 --> 00:04:39,942
a veces escogemos variables
que tienen todo el sentido.

107
00:04:39,942 --> 00:04:42,857
Eso es solo el comienzo que 
tú como un programador en formación 

108
00:04:42,857 --> 00:04:44,435
vas a tener que entender 

109
00:04:44,435 --> 00:04:47,988
que podemos escoger lo que queramos.

110
00:04:47,988 --> 00:04:50,622
Entonces, vas a ver que intentaré 
llevar la atención a eso 

111
00:04:50,622 --> 00:04:52,844
en las primeras lecciones 
a medida que vayamos avanzando.

112
00:04:52,844 --> 00:04:56,040
Así que aquí hay un pedazo de código con
una sentencia de asignación,

113
00:04:56,040 --> 00:04:57,985
dos sentencias de asignación,
una multiplicación,

114
00:04:57,985 --> 00:05:00,077
una sentencia de impresión,

115
00:05:00,077 --> 00:05:02,105
y puedes decir qué está haciendo esto?

116
00:05:02,105 --> 00:05:05,637
Ahora, Python está perfectamente
contento con este código 

117
00:05:05,637 --> 00:05:06,688
porque se lo asigna ahí dentro,

118
00:05:06,688 --> 00:05:09,033
le has dicho por favor ve y 
dame esto como una identificación,

119
00:05:09,033 --> 00:05:10,774
y luego le asignamos dos variables 

120
00:05:10,774 --> 00:05:12,587
y luego estamos cuidadosamente extrayendo 

121
00:05:12,587 --> 00:05:15,221
estas dos variables,
multiplicándolas entre ellas,

122
00:05:15,221 --> 00:05:17,124
y las estamos insertando dentro 
de otra variable 

123
00:05:17,124 --> 00:05:18,727
y luego imprimiendo esa variable.

124
00:05:18,727 --> 00:05:21,345
Ese parecería ser, ya sabes, cómo
podemos darnos cuenta lo que es,

125
00:05:21,345 --> 00:05:22,879
solamente hay que observar detenidamente,

126
00:05:22,879 --> 00:05:25,676
y un solo error de caracter,
y Python se va a poner,

127
00:05:25,676 --> 00:05:29,699
ya sabes, bastante infeliz, cierto?

128
00:05:29,699 --> 00:05:33,045
Así que esa es una forma de escribir este programa.

129
00:05:33,045 --> 00:05:35,068
Es difícil, porque 
cualquiera de esos caracteres

130
00:05:35,068 --> 00:05:37,333
son variables largas y 
son elementos aleatorios,

131
00:05:37,333 --> 00:05:39,540
no es muy amigable 

132
00:05:39,540 --> 00:05:42,041
para la persona que pueda estar leyendo tu programa.

133
00:05:42,041 --> 00:05:43,378
Ahora esto se ve un poco más amigable.

134
00:05:43,378 --> 00:05:44,384
Es el mismo programa,

135
00:05:44,384 --> 00:05:46,702
porque Python solo
quiere una concordancia.

136
00:05:46,702 --> 00:05:49,710
Eliges a, eliges b, y luego eliges c,

137
00:05:49,710 --> 00:05:53,276
y es realmente mucho más fácil
para que sepamos lo que está ocurriendo,

138
00:05:53,276 --> 00:05:58,237
y entonces esto está, de cierta forma
yendo de aquí para aquí,

139
00:05:58,237 --> 00:05:59,965
es mucho más amigable,

140
00:05:59,965 --> 00:06:02,072
pero, podemos hacer que sea aún más amigable

141
00:06:02,072 --> 00:06:03,932
si escogemos nombres mnemotécnicos para las variables.

142
00:06:03,932 --> 00:06:05,349
Entonces esto es, esto no es mnemotécnico,

143
00:06:05,349 --> 00:06:06,876
esto es corto y fácil, 

144
00:06:06,876 --> 00:06:09,054
esto es largo y difícil. 

145
00:06:09,054 --> 00:06:12,327
Python está contento con cualquiera de estos. 

146
00:06:12,327 --> 00:06:13,630
Aquí, por el otro lado, hay otra versión 

147
00:06:13,630 --> 00:06:15,479
del mismo programa,

148
00:06:15,479 --> 00:06:18,391
y ahora piensas internamente, 
oh claro, ahora lo comprendo. 

149
00:06:18,391 --> 00:06:22,710
35 es el número de 
horas, 12.50 es el costo,

150
00:06:22,710 --> 00:06:24,853
y luego vamos a multiplicar 
las horas con el costo

151
00:06:24,853 --> 00:06:25,970
y nos va a dar la paga como resultado,

152
00:06:25,970 --> 00:06:27,410
y vamos a imprimir la paga.

153
00:06:27,410 --> 00:06:28,632
Ahora, quien haya escrito este programa 

154
00:06:28,632 --> 00:06:32,949
está ayudándonos muchísimo a 
comprender qué está ocurriendo, 

155
00:06:32,949 --> 00:06:33,894
y eso es algo bueno. 

156
00:06:33,894 --> 00:06:36,939
Elegir los nombres de las variables, Python nuevamente, 

157
00:06:36,939 --> 00:06:39,207
estos tres son lo mismo para Python. 

158
00:06:39,207 --> 00:06:42,050
Elegir los nombres de las variables de 
manera que ayude a quien los lee 

159
00:06:42,050 --> 00:06:44,948
a comprender qué es lo que está 
ocurriendo, es algo muy bueno.

160
00:06:44,948 --> 00:06:50,238
El problema es, el peligro es 
que, si lees esto 

161
00:06:50,238 --> 00:06:53,092
y crees que de alguna manera 
Python comprende lo que es una nómina;

162
00:06:53,092 --> 00:06:54,705
que si le pones como nombre 'horas' a una variable 

163
00:06:54,705 --> 00:06:56,800
que Python va a saber lo que significa 'horas'. 

164
00:06:56,800 --> 00:06:59,958
La respuesta es, a Python realmente no le interesa 

165
00:06:59,958 --> 00:07:00,929
el nombre que le pongas a la variable, 

166
00:07:00,929 --> 00:07:03,521
siempre y cuando le pongas un nombre 
y lo utilices correctamente, 

167
00:07:03,521 --> 00:07:05,456
y entonces tienes que tener cuidado. 

168
00:07:05,456 --> 00:07:09,685
Y entonces vas a ver, cuando yo escribo mi código

169
00:07:09,685 --> 00:07:13,417
en estas primeras semanas, 
en estas primeras lecciones, 

170
00:07:13,417 --> 00:07:15,439
voy a escribirlo de manera sinsentido,

171
00:07:15,439 --> 00:07:17,464
A veces voy a escribirlo con 
variables extremadamente cortas 

172
00:07:17,464 --> 00:07:18,763
que no tengan ningún sentido como nombre 

173
00:07:18,763 --> 00:07:20,962
y a veces voy a utilizar 
nombres que tengan sentido 

174
00:07:20,962 --> 00:07:24,918
y voy a llevar tu atención a 
eso y lo vas a comprender. 

175
00:07:24,918 --> 00:07:27,198
Vas a comenzar, cuando 
observes a este tercer tipo 

176
00:07:27,198 --> 00:07:30,303
contiene variables que tienen sentido 
o nombres mnemotécnicos,

177
00:07:30,303 --> 00:07:32,567
tú vas a querer instintivamente 

178
00:07:32,567 --> 00:07:34,706
darle a Python más inteligencia 

179
00:07:34,706 --> 00:07:36,640
de lo que realmente necesita. 

180
00:07:36,640 --> 00:07:39,460
Creo que es probablemente la 
mejor manera de decirlo. 

181
00:07:39,460 --> 00:07:41,098
Entonces, hemos hablado de constantes,

182
00:07:41,098 --> 00:07:42,725
hemos hablado de palabras reservadas,

183
00:07:42,725 --> 00:07:46,135
hemos hablado acerca de variables.

184
00:07:46,135 --> 00:07:48,144
Y entonces, aquí tenemos un enunciado, 

185
00:07:48,144 --> 00:07:49,686
como ya hemos hecho 
algunas de estas cosas,

186
00:07:49,686 --> 00:07:53,849
donde hemos dicho x = 2, hemos 
recuperado el viejo valor de x

187
00:07:53,849 --> 00:07:57,697
y le hemos sumado 2, entonces se convierte 
en 4, y luego imprimimos el 4.

188
00:07:57,697 --> 00:07:59,864
'Print' es una función que está integrada 

189
00:07:59,864 --> 00:08:02,134
y le indicamos lo que sea 
que queremos imprimir, 

190
00:08:02,134 --> 00:08:07,584
entonces este paréntesis es 
parte de una invocacion a una función. 

191
00:08:07,584 --> 00:08:10,079
Okay, entonces una sentencia de asignación, 

192
00:08:10,079 --> 00:08:13,257
tienes que realmente internalizar 
la noción dentro de tu cabeza 

193
00:08:13,257 --> 00:08:16,406
que tiene la naturaleza de una flecha, 

194
00:08:16,406 --> 00:08:19,981
Y que valúa todo este lado 
derecho de principio a fin 

195
00:08:19,981 --> 00:08:23,369
antes de que cambiemos el lado izquierdo, 

196
00:08:23,369 --> 00:08:26,422
y entonces puedes pensar esto como 
una especie de paso 1

197
00:08:26,422 --> 00:08:29,335
realiza esto y luego en el 
paso 2 realiza la copia,

198
00:08:29,335 --> 00:08:31,642
y eso es como puedes tener 
algo como x

199
00:08:31,642 --> 00:08:35,767
en ambos lados de una sentencia de asignación.

200
00:08:35,767 --> 00:08:41,003
Entonces, si por ejemplo tenemos 
x, y x tiene 0.6 dentro,

201
00:08:41,003 --> 00:08:43,864
x tiene 0.6 dentro, lo que ocurre es que

202
00:08:43,864 --> 00:08:46,966
primero casi que ignora toda 
esta parte aquí 

203
00:08:46,966 --> 00:08:48,767
y evalúa toda la expresión. 

204
00:08:48,767 --> 00:08:52,684
Entonces extrae el 0.6, en todos lados 
donde x aparece, extrae 0.6,

205
00:08:52,684 --> 00:08:55,148
luego comienza a ejecutar todos estos cálculos,

206
00:08:55,148 --> 00:08:56,955
y luego tiene el nuevo valor. 

207
00:08:56,955 --> 00:08:58,859
Luego de que todos estos cálculos concluyan,

208
00:08:58,859 --> 00:09:04,405
ahí y solamente ahí, va a volverlo 
a insertarlo de nuevo a la x.

209
00:09:04,405 --> 00:09:08,036
Y entonces toma eso y 
lo vuelve a insertar a la x,

210
00:09:08,036 --> 00:09:10,600
y luego borra el valor viejo.

211
00:09:10,600 --> 00:09:12,529
En este punto, todo esto 
ha sido contemplado 

212
00:09:12,529 --> 00:09:15,758
y se ha reducido a este 0.93,

213
00:09:15,758 --> 00:09:20,790
y entonces ese es el valor 
que se va a insertar como nuevo valor. 

214
00:09:20,790 --> 00:09:23,444
Entonces, a continuación, vamos a hablar 
un poco más acerca de 

215
00:09:23,444 --> 00:09:27,765
escribir expresiones más complejas. 

216
00:09:27,765 --> 00:09:30,598
(música clásica)


