1
00:00:00,896 --> 00:00:03,927
- Hola y bienvenidos al capítulo
tres, Ejecución Condicional.

2
00:00:03,927 --> 00:00:06,976
Dentro de la ejecución condicional,
vamos a conocer la sentencia 'if'.

3
00:00:06,976 --> 00:00:09,495
La sentencia 'if' es donde 
Python puede ir hacia un lado,

4
00:00:09,495 --> 00:00:12,241
o hacia otro, y es el 
comienzo, y en cierta manera 

5
00:00:12,241 --> 00:00:16,889
nuestra forma de lograr que Python
tome decisiones por nosotros.

6
00:00:16,889 --> 00:00:19,465
En código secuencial, nosotros simplemente,
ya sabes, hacemos ciertas cosas. 

7
00:00:19,465 --> 00:00:20,791
A veces, eso es útil, pero ahora podemos hacer 

8
00:00:20,791 --> 00:00:24,255
que nuestro código revise algo y luego 

9
00:00:24,255 --> 00:00:27,063
tome una decisión basada en esa revisión. 

10
00:00:27,063 --> 00:00:29,281
Entonces, los pasos condicionales en Python

11
00:00:29,281 --> 00:00:31,449
son bastante sencillos. 

12
00:00:31,449 --> 00:00:34,210
La palabra clave que vamos a utilizar 
es la sentencia 'if'.

13
00:00:34,210 --> 00:00:38,471
Entonces 'if' es una palabra reservada,
y la sentencia 'if' contiene,

14
00:00:38,471 --> 00:00:40,816
como parte que la compone, una pregunta que realiza. 

15
00:00:40,816 --> 00:00:43,769
Esto está preguntando si X es menor a 10.

16
00:00:43,769 --> 00:00:45,488
Los dos puntos es el final de la sentencia 'if',

17
00:00:45,488 --> 00:00:48,179
y luego comenzamos en un 
bloque de texto indentado.

18
00:00:48,179 --> 00:00:50,286
La forma en la que esto funciona, en
esta cuestión particular es, 

19
00:00:50,286 --> 00:00:52,515
esta línea es la línea condicional. 

20
00:00:52,515 --> 00:00:55,520
Si la pregunta es
verdadera, la línea ejecuta, 

21
00:00:55,520 --> 00:00:58,258
y si la pregunta es falsa, 
la línea va a saltarse. 

22
00:00:58,258 --> 00:01:00,385
Y puedes pensarlo de la 
manera en que esto es, correcto?

23
00:01:00,385 --> 00:01:03,382
X es cinco, realiza una pregunta, 
es 10, o no lo es?

24
00:01:03,382 --> 00:01:06,055
Estas preguntas no comprometen 
el valor de X.

25
00:01:06,055 --> 00:01:08,457
En caso de que lo sea, entonces ejecutamos este código, y luego

26
00:01:08,457 --> 00:01:12,202
volvemos a reunirnos aquí,
y ajustamos el siguiente 'if'.

27
00:01:12,202 --> 00:01:14,916
Y si esto es verdadero, realizamos este 
código, y luego ahí. 

28
00:01:14,916 --> 00:01:16,313
Pero, en este caso, va a ser falso, 

29
00:01:16,313 --> 00:01:17,798
porque X no es menor a 20,

30
00:01:17,798 --> 00:01:19,863
entonces continúa aquí abajo. 

31
00:01:19,863 --> 00:01:24,582
Si vemos como funciona esto, ejecuta, 

32
00:01:24,582 --> 00:01:26,753
ejecuta esta línea, luego ve

33
00:01:26,753 --> 00:01:28,073
esta pregunta, se saltea aquella línea. 

34
00:01:28,073 --> 00:01:31,119
Entonces esta línea no se ejecuta, 
entonces 'smaller' se imprime, 

35
00:01:31,119 --> 00:01:34,439
y 'finis' se imprime, está bien?

36
00:01:34,439 --> 00:01:37,198
Entonces esa es la idea básica
de una sentencia 'if',

37
00:01:37,198 --> 00:01:40,792
y el texto indentado, cuando 
terminamos con una sentencia 'if',

38
00:01:40,792 --> 00:01:43,746
salimos del texto indentado, y 
se encuentra este pequeño bloque.

39
00:01:43,746 --> 00:01:48,138
Esta es una sentencia 'if', y 
esta es otra sentencia 'if',

40
00:01:48,138 --> 00:01:49,760
y estas son las dos líneas condicionales, 

41
00:01:49,760 --> 00:01:51,542
que se ejecutan, o no se ejecutan, 

42
00:01:51,542 --> 00:01:55,898
dependiendo de la pregunta, y
la respuesta de esa pregunta. 

43
00:01:55,898 --> 00:01:58,163
Entonces, tenemos una cantidad de 
diferentes operadores de comparación 

44
00:01:58,163 --> 00:02:01,627
que podemos utilizar para realizar estas
preguntas "verdadero-falso",

45
00:02:01,627 --> 00:02:03,396
que dicen, "Es esto verdadero?"

46
00:02:03,396 --> 00:02:06,033
Entonces, nuevamente, estamos en cierta
manera limitados a las teclas 

47
00:02:06,033 --> 00:02:11,527
que estaban en los teclados 
en los años 1940 y 1950.

48
00:02:11,527 --> 00:02:13,592
Menor a, menor o igual a. 

49
00:02:13,592 --> 00:02:15,966
Entonces, no teníamos caracteres matemáticos muy elaborados, 

50
00:02:15,966 --> 00:02:18,343
entonces simplemente concatenamos menor o igual 

51
00:02:18,343 --> 00:02:20,152
para que sea menor a, o igual a. 

52
00:02:20,152 --> 00:02:24,188
Este doble igual está 
preguntando, "Es esto igual a?"

53
00:02:24,188 --> 00:02:26,761
Entonces es un poco complicado, el signo 

54
00:02:26,761 --> 00:02:28,981
igual es el operador de la asignación. 

55
00:02:28,981 --> 00:02:30,931
Si yo estuviese desarrollando un 
lenguaje hoy desde cero,

56
00:02:30,931 --> 00:02:32,967
probablemente haría que la asignación sea una flecha,

57
00:02:32,967 --> 00:02:36,379
y que la pregunta de equivalencia tenga un signo igual. 

58
00:02:36,379 --> 00:02:39,779
O, podría decir, en algún lugar podría decir 

59
00:02:39,779 --> 00:02:42,913
signo de pregunta igual, pero no estoy desarrollando

60
00:02:42,913 --> 00:02:45,773
este lenguaje, no depende de mí. 

61
00:02:45,773 --> 00:02:47,792
Entonces esta es la pregunta, doble igual 

62
00:02:47,792 --> 00:02:51,352
está realizando la pregunta, es igual a. 

63
00:02:51,352 --> 00:02:54,708
Mayor o igual a, 
Mayor a, y no igual a. 

64
00:02:54,708 --> 00:02:56,266
Entonces este signo de exclamación, 

65
00:02:56,266 --> 00:03:00,973
es parecido a no igual a, entonces 
así es como hacemos el no igual. 

66
00:03:00,973 --> 00:03:04,223
Si observamos algunos de estas
y algunos ejemplos. 

67
00:03:04,223 --> 00:03:05,623
Todas estas van a ser verdaderas, 

68
00:03:05,623 --> 00:03:09,201
por la manera en que la X está determinada. 

69
00:03:09,201 --> 00:03:12,702
Si X es igual a cinco, 
esa es la versión de la pregunta. 

70
00:03:12,702 --> 00:03:15,372
Eso es verdadero o falso, va a ejecutar eso. 

71
00:03:15,372 --> 00:03:18,299
Si X es mayor a cuatro,
va a ejecutar esto. 

72
00:03:18,299 --> 00:03:19,860
Si X es mayor o igual a 5, 

73
00:03:19,860 --> 00:03:21,107
va a ejecutar esto. 

74
00:03:21,107 --> 00:03:23,082
Aquí vemos una especie de 
abreviación, donde, si hay una sola 

75
00:03:23,082 --> 00:03:25,276
línea en este bloque, 
tu puedes de cierta manera traerla hacia arriba,

76
00:03:25,276 --> 00:03:27,463
en la misma línea, luego del igual. 

77
00:03:27,463 --> 00:03:31,498
Si X es menor a seis, que
lo es, verdadero, ejecuta esto. 

78
00:03:31,498 --> 00:03:34,184
Luego, si X es menor o igual a 
cinco, ejecuta esto.

79
00:03:34,184 --> 00:03:36,518
Y si X no es igual a seis, ejecuta esto. 

80
00:03:36,518 --> 00:03:38,726
Ahora, como he dicho anteriormente, todas estas preguntas 

81
00:03:38,726 --> 00:03:41,028
han sido cuidadosamente desarrolladas 
para que sean verdaderas. 

82
00:03:41,028 --> 00:03:45,646
Solo para enseñar la sintaxis 
de esos operadores de comparación. 

83
00:03:45,646 --> 00:03:47,279
Y no tienes que tener una sola 

84
00:03:47,279 --> 00:03:49,690
línea de texto en el bloque indentado.

85
00:03:49,690 --> 00:03:52,148
Y esto va a ser algo a lo que
te vas a acostumbrar. 

86
00:03:52,148 --> 00:03:56,523
Entonces, si indentamos más de una línea, 

87
00:03:56,523 --> 00:04:00,235
entonces el código condicional es 
realmente estas tres líneas. 

88
00:04:00,235 --> 00:04:02,213
Así que, la idea es, si tienes una sentencia,

89
00:04:02,213 --> 00:04:03,870
vienes y realizas una indentación. 

90
00:04:03,870 --> 00:04:06,929
Y mientras te mantengas indentado, 
permaneces en el bloque 'if'.

91
00:04:06,929 --> 00:04:11,187
Si es falso, simplemente se saltea todas aquellas. 

92
00:04:11,187 --> 00:04:13,853
Entonces, la manera en la que va a ejecutar. 

93
00:04:13,853 --> 00:04:17,708
X es cinco, imprime, antes de cinco.

94
00:04:17,708 --> 00:04:20,845
Si X es igual a cinco, ese es el signo de 
preguntas, y eso es verdadero. 

95
00:04:20,845 --> 00:04:23,950
Entonces, va a ejecutar todas 
estas, y luego regresar, 

96
00:04:23,950 --> 00:04:25,838
y seguir adelante, y luego salir de la indentación. 

97
00:04:25,838 --> 00:04:28,750
Entonces, todo esto está siendo ejecutado. 

98
00:04:28,750 --> 00:04:31,360
Dice que X es igual a seis, 
bueno, eso es falso. 

99
00:04:31,360 --> 00:04:33,394
Entonces eso se saltea todas, entonces ninguna 

100
00:04:33,394 --> 00:04:39,443
de estas líneas de código se ejecutan, 
entonces estas realmente no ejecutan. 

101
00:04:39,443 --> 00:04:41,368
Y, dice, luego de seis.

102
00:04:41,368 --> 00:04:44,267
Eso es un error, esas 
no ejecutan bien aquí. 

103
00:04:44,267 --> 00:04:49,220
Bien, porque X no es igual a seis.

104
00:04:49,220 --> 00:04:55,147
Entonces, la indentación es una 
pieza esencial de Python.

105
00:04:55,147 --> 00:04:57,801
La indentación se utiliza en muchos 
lenguajes de programación,

106
00:04:57,801 --> 00:05:01,638
usualmente para delimitar bloques, para mostrar 

107
00:05:01,638 --> 00:05:03,367
donde los bloques comienzan y terminan. 

108
00:05:03,367 --> 00:05:06,632
Pero en Python, es sintácticamente correcto, 

109
00:05:06,632 --> 00:05:09,482
si cometes un error, si tu 
indentación está equivocada, 

110
00:05:09,482 --> 00:05:12,470
luego de un 'if', debes indentar, 
y mantener la indentación 

111
00:05:12,470 --> 00:05:16,004
durante el tiempo que quieras, 
para permanecer en el mismo bloque 'if'. 

112
00:05:16,004 --> 00:05:17,489
Y luego, cuando terminas 
con el bloque 'if', 

113
00:05:17,489 --> 00:05:18,847
puedes reducir la indentación. 

114
00:05:18,847 --> 00:05:21,832
En esta regla de indentación, las líneas de comentarios, 

115
00:05:21,832 --> 00:05:26,061
y las líneas en blanco son completamente ignoradas. 

116
00:05:26,061 --> 00:05:32,116
Entonces, vamos a tender a colocar cuatro espacios. 

117
00:05:32,116 --> 00:05:36,030
Cuatro espacios termina siendo 
lo normal que hacemos. 

118
00:05:36,030 --> 00:05:38,122
Vas a ver, todo el código que yo escribo 

119
00:05:38,122 --> 00:05:39,983
tiene cuatro espacios para cada indentación. 

120
00:05:39,983 --> 00:05:42,520
Si entro dos veces, yo utilizo ocho espacios. 

121
00:05:42,520 --> 00:05:44,548
Tenemos el instinto de querer presionar 

122
00:05:44,548 --> 00:05:46,998
la tecla 'tab' para movernos cuatro espacios hacia adentro. 

123
00:05:46,998 --> 00:05:49,959
Ahora, el problema es que 
puede que se vea igual 

124
00:05:49,959 --> 00:05:52,997
en tu pantalla, un tab y cuatro espacios, 

125
00:05:52,997 --> 00:05:56,458
puede que se alineen en el mismo lugar, 
dependiendo de cómo estén configurados los tabs. 

126
00:05:56,458 --> 00:05:58,192
Pero Python puede confundirse con eso, 

127
00:05:58,192 --> 00:06:03,112
entonces intentamos evitar utilizar 
tabs en los archivos. 

128
00:06:03,112 --> 00:06:04,979
Entonces la mayoría de los editores de 
texto de programación, por ejemplo si utilizas 

129
00:06:04,979 --> 00:06:08,260
Notepad, o
TextWrangler, hay un lugar 

130
00:06:08,260 --> 00:06:11,366
para configurar los tabs, para que diga "No
poner tabs en este documento",

131
00:06:11,366 --> 00:06:14,125
"pero cada vez que presiono la tecla tab,
mueve el cursor cuatro espacios."

132
00:06:14,125 --> 00:06:17,175
Oprimes la tecla tab, pero es como si oprimes
espacio, espacio, espacio, espacio. 

133
00:06:17,175 --> 00:06:19,703
Lo bueno de Atom, que es el 

134
00:06:19,703 --> 00:06:21,994
editor de texto que solemos 
recomendar en este curso. 

135
00:06:21,994 --> 00:06:25,324
A, funciona en 
Windows, Linux, and Mac,

136
00:06:25,324 --> 00:06:27,800
pero también porque
automáticamente configura esta cuestión. 

137
00:06:27,800 --> 00:06:30,506
Al momento en que grabas tu 
archivo con la extensión .py,

138
00:06:30,506 --> 00:06:32,890
puedes de cierta manera oprimir la tecla 
tab con impunidad,

139
00:06:32,890 --> 00:06:35,765
y todo va a funcionar perfectamente. 

140
00:06:35,765 --> 00:06:38,638
Pero, la cuestión principal aquí es 
que Python insiste

141
00:06:38,638 --> 00:06:41,532
que no te equivoques con esto, y 
si te equivocas con esto, 

142
00:06:41,532 --> 00:06:43,533
vas a tener errores de indentación. 

143
00:06:43,533 --> 00:06:47,873
Son básicamente otro tipo de error de sintaxis. 

144
00:06:47,873 --> 00:06:49,907
Entonces, si utilizas 
algo como TextWrangler,

145
00:06:49,907 --> 00:06:54,360
o Notepad, date una vuelta en las preferencias, 

146
00:06:54,360 --> 00:06:56,897
y vas a encontrar algo 
acerca de expandir tabs,

147
00:06:56,897 --> 00:07:01,013
o quizás cuántos espacios cada
tab tiene que contener. 

148
00:07:01,013 --> 00:07:03,372
Entonces, revisarías estos, y lo que 
esto está haciendo realmente 

149
00:07:03,372 --> 00:07:05,481
es decirle al editor de texto, 
"Nunca pongas un tab 

150
00:07:05,481 --> 00:07:07,753
en un documento, pero de alguna forma, simula 

151
00:07:07,753 --> 00:07:10,920
tabs utilizando espacios."

152
00:07:10,920 --> 00:07:15,559
Entonces, aquí hay un pedazo de código,
que tiene un bloque anidado. 

153
00:07:15,559 --> 00:07:17,802
Pero te da la sensación 
que tienes que ser 

154
00:07:17,802 --> 00:07:20,066
realmente explícito cuando estás 
leyendo código Python,

155
00:07:20,066 --> 00:07:24,145
ya sea si la indentación es la 
misma entre dos líneas, 

156
00:07:24,145 --> 00:07:28,063
la misma, incrementada o disminuida. 

157
00:07:28,063 --> 00:07:30,394
Cada vez que la incrementas,
estás queriendo decir algo,

158
00:07:30,394 --> 00:07:31,942
cada vez que la disminuyes, 
estás queriendo decir algo,

159
00:07:31,942 --> 00:07:33,743
y literalmente, si la mantienes, 

160
00:07:33,743 --> 00:07:35,415
estás queriendo decir algo, también. 

161
00:07:35,415 --> 00:07:37,671
Entonces, si vemos esto aquí 

162
00:07:37,671 --> 00:07:40,217
tenemos una línea, y la siguiente 
línea tiene la misma indentación.

163
00:07:40,217 --> 00:07:42,736
Esto es un 'if', con dos puntos 
al final, entonces tenemos 

164
00:07:42,736 --> 00:07:46,637
que incrementar la indentación, y
ahora estamos manteniéndola.

165
00:07:46,637 --> 00:07:48,736
Entonces, estas dos líneas son parte de esa 'if', 

166
00:07:48,736 --> 00:07:50,335
pero ahora tenemos que quitarle indentación. 

167
00:07:50,335 --> 00:07:53,062
Entonces, ya sea que eliges 
quitarle indentación a esta palabra, 

168
00:07:53,062 --> 00:07:55,725
o a esta palabra, o lo que sea, donde realizes 

169
00:07:55,725 --> 00:07:59,023
la quita de indentación afecta 
el ámbito de cuán extensa 

170
00:07:59,023 --> 00:08:01,190
va a ser esta sentencia 'if', correcto?

171
00:08:01,190 --> 00:08:03,389
Llega hasta, pero no incluye, 

172
00:08:03,389 --> 00:08:07,944
la línea que le quitamos la indentación 
al mismo nivel que el 'if'.

173
00:08:07,944 --> 00:08:10,552
Esto no tiene indentación, ahora, 
tenemos una línea en blanco, 

174
00:08:10,552 --> 00:08:12,757
que no importa, y la mantenemos. 

175
00:08:12,757 --> 00:08:14,135
Y tenemos un 'for',
que vamos a aprender acerca de eso, 

176
00:08:14,135 --> 00:08:16,311
en el próximo capítulo, que es 
una estructura de bucle. 

177
00:08:16,311 --> 00:08:18,723
Realiza una 'for', for ejecuta esto cinco veces,

178
00:08:18,723 --> 00:08:22,678
tiene dos puntos, y también 
espera un bloque indentado. 

179
00:08:22,678 --> 00:08:24,551
Ahora, tenemos lo que se denomina como un bloque anidado,

180
00:08:24,551 --> 00:08:27,580
donde tenemos una 'if', y 
dos puntos, y entramos un poco más. 

181
00:08:27,580 --> 00:08:29,410
Entonces esto es como dos indentaciones, correcto?

182
00:08:29,410 --> 00:08:32,124
Entonces, estas están en una indentación, 
y estas están en dos indentaciones. 

183
00:08:32,124 --> 00:08:36,741
Esto es un bloque, dentro de 
un bloque, y luego le quitamos la indentación. 

184
00:08:36,741 --> 00:08:38,251
Entonces eso significa que esta impresión no es parte 

185
00:08:38,251 --> 00:08:41,491
de la sentencia 'if', pero sigue 
siendo parte de la sentencia 'for'.

186
00:08:41,491 --> 00:08:44,114
Luego quitamos indentación una vez más, 
y luego eso significa 

187
00:08:44,114 --> 00:08:48,370
esta impresión está en el mismo nivel 
que esa sentencia 'for'. 

188
00:08:48,370 --> 00:08:51,042
Entonces, si empiezas a pensar sobre esto, 

189
00:08:51,042 --> 00:08:52,799
tienes que poder comenzar a pensar que 

190
00:08:52,799 --> 00:08:55,476
estos bloques son 
el comienzo del bloque,

191
00:08:55,476 --> 00:08:59,274
con la línea de los dos puntos, hasta,
pero sin incluir, 

192
00:08:59,274 --> 00:09:01,118
esta línea sin indentación. 

193
00:09:01,118 --> 00:09:04,132
Entonces, el 'for' llega hasta aquí, correcto? 

194
00:09:04,132 --> 00:09:05,483
El 'for' llega hasta, pero 

195
00:09:05,483 --> 00:09:07,381
no incluye la línea a sin indentación. 

196
00:09:07,381 --> 00:09:08,822
El 'if' llega hasta, pero no 

197
00:09:08,822 --> 00:09:11,977
no incluye la línea a sin indentación. 

198
00:09:11,977 --> 00:09:14,312
Entonces, a medida que vayas haciendo esto, 
vas a ir de cierta forma mentalmente 

199
00:09:14,312 --> 00:09:16,331
dibujando estos 
bloques, y bastante pronto, 

200
00:09:16,331 --> 00:09:19,702
vas a comenzar a desarrollarlos 
como bloques. 

201
00:09:19,702 --> 00:09:22,007
Lleva su tiempo, pero 
no es muchísimo. 

202
00:09:22,007 --> 00:09:32,931
Pero en Python, a diferencia de 
otros lenguajes, oops ...

203
00:09:32,931 --> 00:09:36,361
En Python, a diferencia de otros lenguajes,

204
00:09:36,361 --> 00:09:39,259
esto es muy importante, 

205
00:09:39,259 --> 00:09:41,711
y puedes tener errores de sintaxis
si te equivocas. 

206
00:09:41,711 --> 00:09:43,254
Porque estás realmente comunicando 

207
00:09:43,254 --> 00:09:45,276
la forma y la estructura de tu código,

208
00:09:45,276 --> 00:09:48,555
utilizando estas indentaciones y quita de indentación. 

209
00:09:48,555 --> 00:09:50,054
Ya vimos una indentación anidada, 

210
00:09:50,054 --> 00:09:52,801
esto es un 'if' anidado, entonces, puedes poner un 'if' 

211
00:09:52,801 --> 00:09:55,516
dentro de un 'if', y puedes ir 
con la profundidad que quieras, 

212
00:09:55,516 --> 00:09:59,908
como una muñeca rusa, y por eso, 
aquí tenemos una X igual a 42.

213
00:09:59,908 --> 00:10:01,989
Si es una, entonces vamos con una indentación, y luego

214
00:10:01,989 --> 00:10:04,572
con esto que sigue a continuación,
estas están en el mismo lugar

215
00:10:04,572 --> 00:10:06,224
de la indentación, pero ahora vemos una 'if',

216
00:10:06,224 --> 00:10:07,854
y tiene que tener una mayor indentación. 

217
00:10:07,854 --> 00:10:11,186
Entonces esto son dos en, ocho espacios.

218
00:10:11,186 --> 00:10:14,641
Luego quitamos la indentación nuevamente, en realidad,
deberíamos quitar la indentación dos veces. 

219
00:10:14,641 --> 00:10:16,510
Entonces, si miras esto, y observas la 

220
00:10:16,510 --> 00:10:22,011
manera en que funciona, llega hasta aquí. 

221
00:10:22,011 --> 00:10:24,908
Viene aquí, la respuesta es, 
"Sí, X es mayor a uno."

222
00:10:24,908 --> 00:10:26,653
Imprime esto, es X menos de 100,

223
00:10:26,653 --> 00:10:28,557
bueno, es 42, entonces la respuesta es sí. 

224
00:10:28,557 --> 00:10:30,286
Entonces, ejecuta esto, y luego 
en cierta forma continúa 

225
00:10:30,286 --> 00:10:32,218
de vuelta a aquí, y también puedes pensar 

226
00:10:32,218 --> 00:10:33,859
en dibujar cajas alrededor de esto. 

227
00:10:33,859 --> 00:10:37,398
Esta es una caja 'if', y 
luego, dentro de esa caja 'if',

228
00:10:37,398 --> 00:10:41,483
hay otra caja 'if', 
y nuevamente, está la indentación.

229
00:10:41,483 --> 00:10:43,651
El bloque indentado, hasta, pero sin incluir 

230
00:10:43,651 --> 00:10:45,298
donde está la quita de indentación. 

231
00:10:45,298 --> 00:10:49,575
Y esto aquí es como
dos indentaciones hacia atrás. 

232
00:10:49,575 --> 00:10:51,296
Entonces, termina dos bloques, y dos bloques 

233
00:10:51,296 --> 00:10:53,612
terminan donde ponemos esto. 

234
00:10:53,612 --> 00:10:55,868
Podríamos mover esto hacia adentro, o 
podríamos mover esto hacia afuera. 

235
00:10:55,868 --> 00:10:57,313
Podríamos tenerlo todo metido dentro aquí,

236
00:10:57,313 --> 00:10:59,136
podríamos tenerlo aquí, o aquí, 

237
00:10:59,136 --> 00:11:01,316
y donde sea que pongamos esa línea depende de

238
00:11:01,316 --> 00:11:05,323
los finales de estos bloques 
y como van a resultar. 

239
00:11:05,323 --> 00:11:10,423
Una forma, que es una 'if' de una sola
que acabamos de ver, 

240
00:11:10,423 --> 00:11:12,794
pero luego, podrías tener lo que se 
denomina como una 'if' de dos ramas. 

241
00:11:12,794 --> 00:11:15,545
La idea básica de una 'if' de dos ramas es que 

242
00:11:15,545 --> 00:11:17,547
vas a venir,
vas a hacer una consulta, 

243
00:11:17,547 --> 00:11:19,667
y va a ir hacia una dirección 
si la respuesta es sí, 

244
00:11:19,667 --> 00:11:21,223
y va a ir hacia otra dirección, si la respuesta es no. 

245
00:11:21,223 --> 00:11:22,627
A esto le llamamos "if, then, else"

246
00:11:22,627 --> 00:11:24,359
es una especie de bifurcación en el camino. 

247
00:11:24,359 --> 00:11:26,260
La manera de analizarlo es, dependiendo 

248
00:11:26,260 --> 00:11:28,010
del resultado de esta 
pregunta, vamos a elegir 

249
00:11:28,010 --> 00:11:30,300
una o dos de estas, pero si elegimos una, 

250
00:11:30,300 --> 00:11:31,726
la otra nunca ocurrirá. 

251
00:11:31,726 --> 00:11:33,634
Entonces es como un una disyuntiva, vamos a 

252
00:11:33,634 --> 00:11:36,009
ir hacia un camino, o 
vamos a ir hacia el otro camino. 

253
00:11:36,009 --> 00:11:37,658
Pero de ninguna manera vamos a poder

254
00:11:37,658 --> 00:11:41,453
ir atravesando ambos 
caminos, eso no pasa. 

255
00:11:41,453 --> 00:11:44,028
La sintaxis que utilizamos para esto 

256
00:11:44,028 --> 00:11:47,015
es lo que llamamos 'if, then, else'. 

257
00:11:47,015 --> 00:11:49,998
Entonces, la primera parte es una 'if', 

258
00:11:49,998 --> 00:11:52,165
con una indentación, y luego quitamos la indentación, 

259
00:11:52,165 --> 00:11:53,844
y luego esta es otra palabra reservada, 

260
00:11:53,844 --> 00:11:56,721
'else', con dos puntos, y luego volvemos a indentar. 

261
00:11:56,721 --> 00:11:59,882
Esto realmente, termina siendo 
parte de un bloque entero aquí, 

262
00:11:59,882 --> 00:12:04,419
y el 'else', esta es la 
parte que ejecuta si la respuesta es falsa, 

263
00:12:04,419 --> 00:12:06,098
y esta es la parte que 
ejecuta si la respuesta es verdadera. 

264
00:12:06,098 --> 00:12:09,430
La primera rama del 'if',
el primer bloque indentado, 

265
00:12:09,430 --> 00:12:11,221
es lo que va a ejecutar si es verdadero, 

266
00:12:11,221 --> 00:12:12,700
y luego el segundo bloque indentado 

267
00:12:12,700 --> 00:12:15,492
es lo que va a ejecutar si es falso. 

268
00:12:15,492 --> 00:12:17,907
Entonces, aquí vamos, si X es mayor a dos, 

269
00:12:17,907 --> 00:12:20,081
en este caso, lo es, 
vamos a imprimir más grande. 

270
00:12:20,081 --> 00:12:21,462
Y luego vamos a haber terminado. 

271
00:12:21,462 --> 00:12:23,970
Entonces, hacemos una, y sí, esta se ejecutó 

272
00:12:23,970 --> 00:12:25,429
y esta no se ejecutó. 

273
00:12:25,429 --> 00:12:27,295
Así que, básicamente, con un 'if, then, else', 

274
00:12:27,295 --> 00:12:29,300
una de las dos ramas va a ejecutarse, 

275
00:12:29,300 --> 00:12:32,863
pero no hay forma de que 
ambas ramas se ejecuten. 

276
00:12:32,863 --> 00:12:35,312
Nuevamente, es como dibujar estos bloques 

277
00:12:35,312 --> 00:12:38,005
alrededor de estas cosas, 
mentalmente, y en esta, 

278
00:12:38,005 --> 00:12:39,863
tomas en cierta forma del 'if'. 

279
00:12:39,863 --> 00:12:41,925
El 'else' es realmente parte del bloque, 

280
00:12:41,925 --> 00:12:43,631
hasta, pero sin incluir, 'print', 

281
00:12:43,631 --> 00:12:46,516
que está hacia atrás, sin indentación 

282
00:12:46,516 --> 00:12:51,751
hasta el mismo nivel que la sentencia 'if'. 

283
00:12:51,751 --> 00:12:54,643
Python es en realidad uno de 
los lenguajes de programación más elegantes, 

284
00:12:54,643 --> 00:12:57,282
aunque, luego de un tiempo, 
este tema de la indentación, 

285
00:12:57,282 --> 00:13:01,514
cuando estás realmente metido en profundidad, se
vuelve un poco más complejo. 

286
00:13:01,514 --> 00:13:04,739
Esta es una buena manera de visualizar 
esto, con estas indentaciones. 

287
00:13:04,739 --> 00:13:06,782
A continuación, vamos a hablar acerca de 

288
00:13:06,782 --> 00:13:10,199
algunas estructuras condicionales más complejas. 