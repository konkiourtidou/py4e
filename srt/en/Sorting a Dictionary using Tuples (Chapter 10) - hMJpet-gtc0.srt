1
00:00:00,255 --> 00:00:02,220
- [Instructor] Hello and
welcome to Python for Everybody.

2
00:00:02,220 --> 00:00:05,293
I'm Charles Severance and now
in this little bit of lesson

3
00:00:05,293 --> 00:00:07,611
we're going to talk about some tuples

4
00:00:07,611 --> 00:00:09,254
and we're going to create a list

5
00:00:09,254 --> 00:00:12,042
of the most common words and find out how

6
00:00:12,042 --> 00:00:15,916
to sort a dictionary by the
values instead of by the key.

7
00:00:15,916 --> 00:00:18,432
We're gonna use the clown.txt file

8
00:00:18,432 --> 00:00:22,675
and the intro.txt file and
I'm gonna start with the code

9
00:00:22,675 --> 00:00:26,608
from exercise nine that I
just did from chapter nine.

10
00:00:26,608 --> 00:00:28,241
It's not exactly one of the exercises,

11
00:00:28,241 --> 00:00:29,815
but it's very similar to them.

12
00:00:29,815 --> 00:00:32,130
And I'm going to make a
copy and I'm gonna keep it

13
00:00:32,130 --> 00:00:34,885
in the same folder, I'm gonna
keep it in the ex_09 folder

14
00:00:34,885 --> 00:00:39,292
and just call it ex_10 because this code

15
00:00:39,292 --> 00:00:42,872
is going to do much of the same stuff

16
00:00:42,872 --> 00:00:44,338
and it's gonna read these same files.

17
00:00:44,338 --> 00:00:46,047
And so I got myself exercise 10.

18
00:00:46,047 --> 00:00:47,501
Exercise nine is still here.

19
00:00:47,501 --> 00:00:50,313
Exercise 10 is now what
I'm editing, exercise 10.

20
00:00:50,313 --> 00:00:53,142
But I'm in the exercise nine folder.

21
00:00:53,142 --> 00:00:57,806
So in exercise nine, we looked
for the most common word,

22
00:00:57,806 --> 00:00:59,859
but we wanna find the
five most common words,

23
00:00:59,859 --> 00:01:01,846
which is gonna require us to sort.

24
00:01:01,846 --> 00:01:03,129
So I'm gonna get rid of that code

25
00:01:03,129 --> 00:01:04,696
'cause it's not really
how we're gonna do it.

26
00:01:04,696 --> 00:01:06,397
There we manually looped through it

27
00:01:06,397 --> 00:01:10,419
and found the maximum and
so I'm gonna just run this.

28
00:01:10,419 --> 00:01:16,625
CD Desktop Python four everybody, ex_09.

29
00:01:16,625 --> 00:01:18,162
And if I do an LS, you see that I've got

30
00:01:18,162 --> 00:01:26,085
ex_09.py intro.txt, so
I'll run Python3, ex_10.py.

31
00:01:26,085 --> 00:01:29,266
And run the clown data and we see that

32
00:01:29,266 --> 00:01:31,652
we see the dictionary and
it's properly making it

33
00:01:31,652 --> 00:01:32,728
in this code right here.

34
00:01:32,728 --> 00:01:35,998
That doesn't change, it reads
the file, reads all the lines,

35
00:01:35,998 --> 00:01:37,232
goes through and splits it into words

36
00:01:37,232 --> 00:01:38,261
and then goes through the words

37
00:01:38,261 --> 00:01:43,031
and does the idiom of using
dictionary get to maintain

38
00:01:43,031 --> 00:01:44,871
the counters and we print
it out at the very end.

39
00:01:44,871 --> 00:01:48,557
So the new code we're going
to write is down here.

40
00:01:48,557 --> 00:01:49,968
Okay?

41
00:01:49,968 --> 00:01:53,514
So let's first do a few things.

42
00:01:53,514 --> 00:02:00,174
If I can say X is equal to
the dictionary dot items.

43
00:02:00,174 --> 00:02:02,961
And this gives us basically a list,

44
00:02:02,961 --> 00:02:07,690
print X, this gives us a
list of the key value pairs.

45
00:02:07,690 --> 00:02:08,632
This prints out the dictionary,

46
00:02:08,632 --> 00:02:11,148
but if we do it this way and use items,

47
00:02:11,148 --> 00:02:13,831
it gives us the key value pairs.

48
00:02:13,831 --> 00:02:15,859
And so that's what we got.

49
00:02:15,859 --> 00:02:16,692
Key value pairs.

50
00:02:16,692 --> 00:02:20,219
Now we can sort this based on the value,

51
00:02:20,219 --> 00:02:21,921
'cause tuples can be compared.

52
00:02:21,921 --> 00:02:23,926
This can be compared with this

53
00:02:23,926 --> 00:02:28,354
and because D is lower than
R then this one is lower,

54
00:02:28,354 --> 00:02:31,982
this whole, this ran tuple
comes after the down tuple.

55
00:02:31,982 --> 00:02:33,825
So we can sort this whole thing.

56
00:02:33,825 --> 00:02:37,714
And I'll do this by just
putting the word sorted here

57
00:02:37,714 --> 00:02:39,641
and say give me a sorted version of that.

58
00:02:39,641 --> 00:02:42,622
Now it's gonna do it based
on the order of the tuples.

59
00:02:42,622 --> 00:02:45,469
This is gonna be more
higher precedence than this.

60
00:02:45,469 --> 00:02:49,388
So if I print it this way,

61
00:02:49,388 --> 00:02:52,755
run it again, you'll see that it's sorted.

62
00:02:52,755 --> 00:02:56,938
And now is after and, car,
it's in alphabetical order

63
00:02:56,938 --> 00:02:58,179
by key.

64
00:02:58,179 --> 00:03:01,581
And so we could actually
print the first five

65
00:03:01,581 --> 00:03:04,653
up to but not including
five by adding a list

66
00:03:04,653 --> 00:03:07,447
on the list slice here.

67
00:03:07,447 --> 00:03:11,831
And so that will show you
only the first five, right?

68
00:03:11,831 --> 00:03:13,453
Except that that's not
what we're trying to do.

69
00:03:13,453 --> 00:03:16,410
We really wanna sort by this.

70
00:03:16,410 --> 00:03:18,432
Okay?

71
00:03:18,432 --> 00:03:21,404
So we have this mechanism that can

72
00:03:21,404 --> 00:03:25,032
take a list and sort it
based on the tuple values.

73
00:03:25,032 --> 00:03:28,618
If we could create a list
where it was one comma after,

74
00:03:28,618 --> 00:03:32,009
instead of after comma one,
and make it exact same thing,

75
00:03:32,009 --> 00:03:35,015
then we could actually then
sort it and it would be fine.

76
00:03:35,015 --> 00:03:36,025
Okay?

77
00:03:36,025 --> 00:03:38,134
So let me show you a couple of ways,

78
00:03:38,134 --> 00:03:42,692
at least one way to do that, okay?

79
00:03:42,692 --> 00:03:45,604
Get rid of this.

80
00:03:45,604 --> 00:03:47,779
We're gonna hand construct the list

81
00:03:47,779 --> 00:03:52,486
and just call it temp
equals, give me a new list.

82
00:03:52,486 --> 00:03:58,425
Temp equals new list
and then for K comma V

83
00:03:58,425 --> 00:04:03,048
in the dictionary dot items.

84
00:04:03,048 --> 00:04:08,713
And I'll just start by
printing K comma V, so we see.

85
00:04:08,713 --> 00:04:09,663
And this is where it's really nice

86
00:04:09,663 --> 00:04:12,062
to do these with the clown code first

87
00:04:12,062 --> 00:04:15,190
and then only do your test
on the bigger file later.

88
00:04:15,190 --> 00:04:17,273
And so it's pretty much the same thing.

89
00:04:17,273 --> 00:04:19,839
We are going through in key value order,

90
00:04:19,839 --> 00:04:22,550
which is dictionary order,
which is not sorted at all.

91
00:04:22,550 --> 00:04:23,745
Okay?

92
00:04:23,745 --> 00:04:27,954
Now instead of printing
this out, we are going to,

93
00:04:27,954 --> 00:04:29,639
let me do this in a couple of steps.

94
00:04:29,639 --> 00:04:32,238
Make a new tuple.

95
00:04:32,238 --> 00:04:40,058
And we'll just call it newt,
equals parenthese, V comma K.

96
00:04:40,058 --> 00:04:42,651
Okay, so this is I'm
saying make a new tuple.

97
00:04:42,651 --> 00:04:45,224
This is like a new tuple
with two items in it

98
00:04:45,224 --> 00:04:49,376
and I'm gonna make the value
for and the K, the key.

99
00:04:49,376 --> 00:04:56,237
Okay, so then I'm going
to say temp dot append.

100
00:04:56,237 --> 00:04:58,021
Newt, new tuple.

101
00:04:58,021 --> 00:05:01,421
So I'm gonna end up with a list of tuples.

102
00:05:01,421 --> 00:05:03,103
Let me comment this one out.

103
00:05:03,103 --> 00:05:12,524
And under then, when I'm done
here, I'm gonna print temp.

104
00:05:12,524 --> 00:05:16,479
So if I run clown.txt, you
see what happens in temp.

105
00:05:16,479 --> 00:05:24,435
It's still, well, let's print temp twice.

106
00:05:24,435 --> 00:05:28,822
I mean, it's not sorted, it's flipped.

107
00:05:28,822 --> 00:05:31,581
Let's print it.

108
00:05:31,581 --> 00:05:36,490
Well, that's okay, we'll
just, that's the flipped one.

109
00:05:36,490 --> 00:05:37,458
Okay, so it's flipped.

110
00:05:37,458 --> 00:05:40,335
And all we did is we made it,
instead of car comma three,

111
00:05:40,335 --> 00:05:41,877
it's three comma car.

112
00:05:41,877 --> 00:05:44,638
But now we have a list.

113
00:05:44,638 --> 00:05:45,833
Okay?

114
00:05:45,833 --> 00:05:48,964
So now it's flipped and
now we can sort that.

115
00:05:48,964 --> 00:05:54,856
We can say temp equals sorted temp.

116
00:05:54,856 --> 00:05:58,263
So that says takes temp and
sort it and give it back to me.

117
00:05:58,263 --> 00:06:09,509
And now I'm gonna say
print sorted comma temp.

118
00:06:09,509 --> 00:06:12,491
Okay, so here's the first print.

119
00:06:12,491 --> 00:06:15,588
When we flipped it, we've got two tent,

120
00:06:15,588 --> 00:06:16,907
but it's not sorted at all.

121
00:06:16,907 --> 00:06:19,167
But after we sorted it, it sorted by tuple

122
00:06:19,167 --> 00:06:22,204
and the lowest is one
after, so you'll notice

123
00:06:22,204 --> 00:06:24,655
that one is the same as one, so it checked

124
00:06:24,655 --> 00:06:28,407
the second item in the tuple,
so down comes before after,

125
00:06:28,407 --> 00:06:30,736
fell becomes after down.

126
00:06:30,736 --> 00:06:33,993
Intro, on, alphabetical order,
but now we get the twos.

127
00:06:33,993 --> 00:06:39,741
So all the ones sort there
and then the twos come here.

128
00:06:39,741 --> 00:06:41,825
But then within the twos it's
sorting alphabetical order

129
00:06:41,825 --> 00:06:46,192
'cause like a string, if
the first character matches,

130
00:06:46,192 --> 00:06:47,863
then it looks to the second character.

131
00:06:47,863 --> 00:06:50,904
And then we see, oh,
here we go, the threes

132
00:06:50,904 --> 00:06:52,734
and then the one we actually wanted,

133
00:06:52,734 --> 00:06:55,560
the highest one, is the seven.

134
00:06:55,560 --> 00:06:58,095
And so one of the things
we can do is we can say,

135
00:06:58,095 --> 00:06:59,909
you'll notice that we
want the highest one,

136
00:06:59,909 --> 00:07:01,080
not the lowest one.

137
00:07:01,080 --> 00:07:04,286
So we can just tell this
with this parameter.

138
00:07:04,286 --> 00:07:09,568
Reverse equals true.

139
00:07:09,568 --> 00:07:11,742
And we just say hey,
sorted, do this backwards.

140
00:07:11,742 --> 00:07:14,933
Do it from highest to lowest,
rather than lowest to highest.

141
00:07:14,933 --> 00:07:20,323
And now our sorted one
says seven the, et cetera.

142
00:07:20,323 --> 00:07:21,172
Okay?

143
00:07:21,172 --> 00:07:30,909
And so if we want the
first five, we can say,

144
00:07:30,909 --> 00:07:33,223
up to but not including five.

145
00:07:33,223 --> 00:07:37,849
So this is now the top five.

146
00:07:37,849 --> 00:07:41,296
So the sorted one is, that's the top five.

147
00:07:41,296 --> 00:07:43,255
If there is, it's a tie, we're gonna go

148
00:07:43,255 --> 00:07:45,065
in reverse alphabetical
order, but let's not

149
00:07:45,065 --> 00:07:47,226
worry about that too much for now.

150
00:07:47,226 --> 00:07:53,347
So it makes a flipped list,
then it sorts the flipped list.

151
00:07:53,347 --> 00:07:57,005
Now, if I just wanted
to print it out nicer,

152
00:07:57,005 --> 00:07:59,029
I could loop through this new list.

153
00:07:59,029 --> 00:08:02,035
I could say for V comma K.

154
00:08:02,035 --> 00:08:03,316
Remember this is a flipped list

155
00:08:03,316 --> 00:08:06,889
so the sensible thing is,
what's coming out of this list

156
00:08:06,889 --> 00:08:10,740
each tuple is value comma key in temp

157
00:08:10,740 --> 00:08:13,649
and I'm only gonna go up
through but not including five,

158
00:08:13,649 --> 00:08:14,960
so the first five.

159
00:08:14,960 --> 00:08:17,891
And so I'm pulling them
back out as value key,

160
00:08:17,891 --> 00:08:21,451
'cause that's what they
are, they're value key.

161
00:08:21,451 --> 00:08:24,736
See value key, value key, value key.

162
00:08:24,736 --> 00:08:26,322
So V is gonna go through these

163
00:08:26,322 --> 00:08:27,669
and K is gonna go through these.

164
00:08:27,669 --> 00:08:30,323
And then I'm just gonna print,

165
00:08:30,323 --> 00:08:32,897
K comma V, so this kinda
my flipping backwards

166
00:08:32,897 --> 00:08:37,317
'cause I wanna see them this way.

167
00:08:37,317 --> 00:08:39,539
And the is the most common one, car three,

168
00:08:39,539 --> 00:08:41,049
and so it's just going through this

169
00:08:41,049 --> 00:08:43,995
up through the fifth one
and then printing 'em out.

170
00:08:43,995 --> 00:08:44,952
Okay?

171
00:08:44,952 --> 00:08:47,438
So let me comment this out.

172
00:08:47,438 --> 00:08:53,137
Let me comment that out.

173
00:08:53,137 --> 00:08:55,292
Let me just delete this.

174
00:08:55,292 --> 00:08:56,999
So we have a dictionary.

175
00:08:56,999 --> 00:08:59,314
Let me comment out the dictionary.

176
00:08:59,314 --> 00:09:01,292
We have a dictionary, we make a list,

177
00:09:01,292 --> 00:09:04,059
and we make these reversed tuples where

178
00:09:04,059 --> 00:09:05,796
we have the value first
and the key second.

179
00:09:05,796 --> 00:09:08,809
We're setting it up so
the sort's gonna work.

180
00:09:08,809 --> 00:09:10,896
And then once it's sorted,
we have to flip 'em back.

181
00:09:10,896 --> 00:09:13,679
So we flip 'em for sorting from key value

182
00:09:13,679 --> 00:09:15,997
to value key for sorting.

183
00:09:15,997 --> 00:09:18,177
We do the sort, then we flip 'em back

184
00:09:18,177 --> 00:09:24,970
with key value and print them out.

185
00:09:24,970 --> 00:09:29,532
And it works fine, so let's
try our big file intro.txt

186
00:09:29,532 --> 00:09:31,241
and there you go.

187
00:09:31,241 --> 00:09:36,460
Those are the five most
common words in intro.txt.

188
00:09:36,460 --> 00:09:39,099
So you might ask yourself
why did we use tuples?

189
00:09:39,099 --> 00:09:41,789
We probably, we could have
really used lists for this,

190
00:09:41,789 --> 00:09:43,395
but tuples are more efficient than lists

191
00:09:43,395 --> 00:09:45,836
and you noticed that we
weren't going to modify.

192
00:09:45,836 --> 00:09:48,434
We did modify the temp
list, it's a list of tuples,

193
00:09:48,434 --> 00:09:52,108
but the tuples within the
list we weren't gonna modify.

194
00:09:52,108 --> 00:09:55,107
And so we tend not to make lists if we can

195
00:09:55,107 --> 00:09:56,651
get away with using tuples.

196
00:09:56,651 --> 00:09:59,462
And so that's why we made this

197
00:09:59,462 --> 00:10:01,664
flipped tuple thing, okay?

198
00:10:01,664 --> 00:10:04,450
So I hope that was useful to you.

199
00:10:04,450 --> 00:10:05,549
Hope to see you on the net.

