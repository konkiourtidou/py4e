1
00:00:00,775 --> 00:00:04,049
- [Instructor] Hello, and
welcome to Python for Everyone.

2
00:00:04,049 --> 00:00:05,686
I'm gonna do some coding.

3
00:00:05,686 --> 00:00:09,599
It's related to the dictionaries
chapter, chapter nine.

4
00:00:09,599 --> 00:00:11,886
And we're gonna do some wordcount

5
00:00:11,886 --> 00:00:16,074
that's basically right out of the slides.

6
00:00:16,074 --> 00:00:18,895
But I'm gonna just write
the code in front of you

7
00:00:18,895 --> 00:00:21,682
rather than have you
look at it in the book.

8
00:00:21,682 --> 00:00:25,606
So what we're gonna do is, I've
got my text editor up here.

9
00:00:25,606 --> 00:00:29,097
And let me start by making a new folder,

10
00:00:29,097 --> 00:00:31,640
New Folder,

11
00:00:31,640 --> 00:00:34,516
for my chapter nine exercise.

12
00:00:34,516 --> 00:00:37,140
And then I'm gonna go
and make an untitled file

13
00:00:37,140 --> 00:00:38,834
that will assume the previous one,

14
00:00:38,834 --> 00:00:40,715
and I'll do what I always do,

15
00:00:40,715 --> 00:00:43,986
print

16
00:00:43,986 --> 00:00:47,469
hello, and save it.

17
00:00:47,469 --> 00:00:50,786
And save it here, into exercise 09,

18
00:00:50,786 --> 00:00:54,687
and ex 09 dot py.

19
00:00:54,687 --> 00:00:58,496
So now I have a folder
that's in my py4e folder

20
00:00:58,496 --> 00:01:02,524
and that happens to be in my Desktop,

21
00:01:02,524 --> 00:01:06,088
py4e is my folder on my Desktop,

22
00:01:06,088 --> 00:01:08,724
and now I have all of these sub-folders,

23
00:01:08,724 --> 00:01:11,545
cd ex 08,

24
00:01:11,545 --> 00:01:15,060
ls is dir on Windows,

25
00:01:15,060 --> 00:01:17,440
ls, oops,

26
00:01:17,440 --> 00:01:19,460
I gotta go up one,

27
00:01:19,460 --> 00:01:21,582
ex 09 ls.

28
00:01:21,582 --> 00:01:23,462
So I've got that file right there.

29
00:01:23,462 --> 00:01:25,842
Now I'm gonna wanna read some files

30
00:01:25,842 --> 00:01:28,710
and so I'm gonna bring some files down,

31
00:01:28,710 --> 00:01:31,241
couple of files,

32
00:01:31,241 --> 00:01:34,039
Python for Everybody code 3 intro dot txt,

33
00:01:34,039 --> 00:01:35,955
so I've got this URL

34
00:01:35,955 --> 00:01:37,348
and I'm gonna save it,

35
00:01:37,348 --> 00:01:38,497
Save Page As,

36
00:01:38,497 --> 00:01:40,169
and it's really important that I save it

37
00:01:40,169 --> 00:01:42,828
in the same folder as
I'm gonna write my code,

38
00:01:42,828 --> 00:01:44,465
just so that when I open this file,

39
00:01:44,465 --> 00:01:45,730
it knows where it's at.

40
00:01:45,730 --> 00:01:47,251
So I've saved that one,

41
00:01:47,251 --> 00:01:50,281
and I'm gonna also take this clown text.

42
00:01:50,281 --> 00:01:53,370
I'll use this to make my life simple

43
00:01:53,370 --> 00:01:54,561
so I have a real short thing

44
00:01:54,561 --> 00:01:56,484
that I can show you how it works.

45
00:01:56,484 --> 00:02:00,431
And so now if I go back to my terminal,

46
00:02:00,431 --> 00:02:04,355
I see I've got exercise
09 python intro dot txt

47
00:02:04,355 --> 00:02:05,795
and clown dot txt.

48
00:02:05,795 --> 00:02:07,316
Okay?

49
00:02:07,316 --> 00:02:12,343
So let's go back to my text
editor and get started.

50
00:02:12,343 --> 00:02:16,197
I will prompt for the file name,

51
00:02:16,197 --> 00:02:20,977
input Enter File

52
00:02:20,977 --> 00:02:23,575
colon space.

53
00:02:23,575 --> 00:02:25,084
Now I'm gonna do something,

54
00:02:25,084 --> 00:02:27,949
if the length

55
00:02:27,949 --> 00:02:31,513
of the fname that I just read

56
00:02:31,513 --> 00:02:34,311
is less than one, I'm gonna say

57
00:02:34,311 --> 00:02:36,871
fname equals

58
00:02:36,871 --> 00:02:39,785
clown txt.

59
00:02:39,785 --> 00:02:42,943
I do this so that I can just hit enter

60
00:02:42,943 --> 00:02:44,661
and it defaults to clown dot txt,

61
00:02:44,661 --> 00:02:47,169
if I wanna give it a
different name, I can.

62
00:02:47,169 --> 00:02:49,944
So if I just hit enter at this prompt,

63
00:02:49,944 --> 00:02:52,115
then this will give me a
string that's zero lengths,

64
00:02:52,115 --> 00:02:54,866
so if it's less than one,
I'll just assume that.

65
00:02:54,866 --> 00:02:57,084
So let me open that.

66
00:02:57,084 --> 00:03:00,146
Handle equals open

67
00:03:00,146 --> 00:03:02,236
fname,

68
00:03:02,236 --> 00:03:04,906
and let's read through it,

69
00:03:04,906 --> 00:03:06,551
for line

70
00:03:06,551 --> 00:03:11,462
in handle,

71
00:03:11,462 --> 00:03:13,181
we'll strip it,

72
00:03:13,181 --> 00:03:15,206
line equals line.rstrip

73
00:03:15,206 --> 00:03:17,966
to take the white space
off the right-hand side,

74
00:03:17,966 --> 00:03:20,099
and then we're gonna say, print line.

75
00:03:20,099 --> 00:03:22,166
Again, I'm not just doing this,

76
00:03:22,166 --> 00:03:25,045
I really, when I write
code, I just saved it,

77
00:03:25,045 --> 00:03:27,216
when I write code, I do this kind of stuff

78
00:03:27,216 --> 00:03:31,605
all the time, just for
my own sanity-checking.

79
00:03:31,605 --> 00:03:35,459
And so now I'm gonna run python3

80
00:03:35,459 --> 00:03:39,244
ex 09.py, just to test that.

81
00:03:39,244 --> 00:03:40,440
I'm gonna hit enter now

82
00:03:40,440 --> 00:03:42,321
and it's gonna assume,
hopefully, clown dot txt

83
00:03:42,321 --> 00:03:45,731
if it all goes well, and
yep, it read one line.

84
00:03:45,731 --> 00:03:46,808
Okay?

85
00:03:46,808 --> 00:03:48,108
So that part's working,

86
00:03:48,108 --> 00:03:49,873
I'll just leave that print statement in.

87
00:03:49,873 --> 00:03:51,254
The next thing I wanna do is

88
00:03:51,254 --> 00:03:54,575
a classic thing where we're gonna go read

89
00:03:54,575 --> 00:03:56,003
a bunch of lines and then go horizontally

90
00:03:56,003 --> 00:03:57,803
across those lines and words,

91
00:03:57,803 --> 00:03:59,196
so I'm gonna split that,

92
00:03:59,196 --> 00:04:01,735
wds equals line

93
00:04:01,735 --> 00:04:05,137
dot split,

94
00:04:05,137 --> 00:04:08,121
and print wds.

95
00:04:08,121 --> 00:04:10,257
So I'll print that,

96
00:04:10,257 --> 00:04:12,196
and I'm gonna save it and test it.

97
00:04:12,196 --> 00:04:15,145
I really love to test
things over and over,

98
00:04:15,145 --> 00:04:16,410
there's the actual line,

99
00:04:16,410 --> 00:04:18,964
this file clown dot txt only has one line

100
00:04:18,964 --> 00:04:20,567
and it breaks it into words

101
00:04:20,567 --> 00:04:22,192
and so I have those words.

102
00:04:22,192 --> 00:04:24,569
Let's just run it again

103
00:04:24,569 --> 00:04:27,355
with intro dot txt,

104
00:04:27,355 --> 00:04:28,493
so this will have a lot of lines,

105
00:04:28,493 --> 00:04:29,886
line, line, line, line, line,

106
00:04:29,886 --> 00:04:31,071
lots of lines.

107
00:04:31,071 --> 00:04:32,681
Every line has, it prints out the line

108
00:04:32,681 --> 00:04:35,862
and prints out the words
that we split it into.

109
00:04:35,862 --> 00:04:38,985
So now I, one of the things that I do here

110
00:04:38,985 --> 00:04:41,400
is I wanna believe, now I can believe

111
00:04:41,400 --> 00:04:43,653
everything from here up, like oh,

112
00:04:43,653 --> 00:04:45,452
it's gonna open the file, it's
gonna read through the lines

113
00:04:45,452 --> 00:04:47,298
and gonna split 'em into words.

114
00:04:47,298 --> 00:04:49,063
And so then I'll just, behind it,

115
00:04:49,063 --> 00:04:53,034
I'll just say, okay, I'll
just comment that out.

116
00:04:53,034 --> 00:04:55,692
Now, I need another for loop,

117
00:04:55,692 --> 00:04:57,419
for

118
00:04:57,419 --> 00:04:59,381
w in wds.

119
00:04:59,381 --> 00:05:01,703
Now words is a Python list,

120
00:05:01,703 --> 00:05:03,421
it has some number of words in it,

121
00:05:03,421 --> 00:05:06,127
zero or twelve or
whatever was on the line.

122
00:05:06,127 --> 00:05:11,212
And now I'm gonna print out

123
00:05:11,212 --> 00:05:14,126
the word.

124
00:05:14,126 --> 00:05:17,249
And so now it will go
through that horizontally

125
00:05:17,249 --> 00:05:19,304
and now I'll just do clown dot txt

126
00:05:19,304 --> 00:05:22,740
so that you see I'm not
printing the line out,

127
00:05:22,740 --> 00:05:24,575
that's the words that
have been parsed from,

128
00:05:24,575 --> 00:05:25,895
split from the line.

129
00:05:25,895 --> 00:05:27,764
And now we got this loop.

130
00:05:27,764 --> 00:05:29,192
Now, one other thing that's interesting

131
00:05:29,192 --> 00:05:31,572
is just to make sure
that you're going through

132
00:05:31,572 --> 00:05:35,125
all the words, and I like
a print statement here,

133
00:05:35,125 --> 00:05:38,608
to know that w is going
to successfully take on,

134
00:05:38,608 --> 00:05:40,907
literally, all the words of this file.

135
00:05:40,907 --> 00:05:44,100
So if I comment this print statement out

136
00:05:44,100 --> 00:05:46,724
and I run it again,

137
00:05:46,724 --> 00:05:48,082
clown dot txt,

138
00:05:48,082 --> 00:05:49,835
that for loop, starting from here,

139
00:05:49,835 --> 00:05:51,182
is every word in that file,

140
00:05:51,182 --> 00:05:52,981
which happens to only be one line.

141
00:05:52,981 --> 00:05:59,796
But now if I do the same
thing for intro dot txt,

142
00:05:59,796 --> 00:06:01,108
it's just gonna go through the words,

143
00:06:01,108 --> 00:06:03,291
and in a sense, by
nesting these two loops,

144
00:06:03,291 --> 00:06:06,077
we're gonna hit all the lines
and that's a lot of stuff

145
00:06:06,077 --> 00:06:09,015
but it hit all of the
lines, all the words,

146
00:06:09,015 --> 00:06:10,663
and away we go.

147
00:06:10,663 --> 00:06:15,342
Okay, so here's where
our dictionary comes in.

148
00:06:15,342 --> 00:06:19,638
I'm gonna make a variable
called di for dictionary

149
00:06:19,638 --> 00:06:21,937
and I'm gonna say, give me a dictionary.

150
00:06:21,937 --> 00:06:24,026
Now, the ict is not
something you can choose,

151
00:06:24,026 --> 00:06:27,358
that's defining the type of dictionary.

152
00:06:27,358 --> 00:06:29,564
Di's the variable that I chose.

153
00:06:29,564 --> 00:06:32,525
Okay, so the key thing to this dictionary

154
00:06:32,525 --> 00:06:34,499
is we're gonna make a counter,

155
00:06:34,499 --> 00:06:37,111
and we're gonna use w, the word,

156
00:06:37,111 --> 00:06:39,584
absorb, elegant, whatever,

157
00:06:39,584 --> 00:06:41,917
and we're gonna use that as the index.

158
00:06:41,917 --> 00:06:44,379
So the simple thing to do is to say,

159
00:06:44,379 --> 00:06:47,560
if w is in

160
00:06:47,560 --> 00:06:49,551
di,

161
00:06:49,551 --> 00:06:53,568
then we can say w, I mean the dictionary,

162
00:06:53,568 --> 00:06:55,739
sub the word which is our key

163
00:06:55,739 --> 00:06:58,815
and the key value store of the dictionary,

164
00:06:58,815 --> 00:07:01,068
is equal to the value that we had before

165
00:07:01,068 --> 00:07:06,013
in that area, d sub w plus one.

166
00:07:06,013 --> 00:07:08,022
And if it's not in there,

167
00:07:08,022 --> 00:07:11,168
else

168
00:07:11,168 --> 00:07:15,197
di sub w

169
00:07:15,197 --> 00:07:17,438
equals one.

170
00:07:17,438 --> 00:07:22,697
And I'm gonna print,

171
00:07:22,697 --> 00:07:24,911
print

172
00:07:24,911 --> 00:07:27,326
new,

173
00:07:27,326 --> 00:07:29,544
so every time we see a new word,

174
00:07:29,544 --> 00:07:30,891
it's gonna say new,

175
00:07:30,891 --> 00:07:33,480
and I'm going to also then print w

176
00:07:33,480 --> 00:07:36,672
and the current value of the counter for w

177
00:07:36,672 --> 00:07:38,193
as it's going through.

178
00:07:38,193 --> 00:07:39,912
Now notice how far in I'm indented.

179
00:07:39,912 --> 00:07:42,199
This is all part of this inner loop,

180
00:07:42,199 --> 00:07:43,917
so this is the loop that's gonna run

181
00:07:43,917 --> 00:07:45,533
every single word.

182
00:07:45,533 --> 00:07:46,959
Okay?

183
00:07:46,959 --> 00:07:50,514
And I'm gonna run this first with clown

184
00:07:50,514 --> 00:07:54,238
so it runs slowly, so

185
00:07:54,238 --> 00:07:58,371
we saw the was new, and the count is one,

186
00:07:58,371 --> 00:08:00,658
clown is new, count is one,

187
00:08:00,658 --> 00:08:02,632
ran is new, the count is one,

188
00:08:02,632 --> 00:08:04,675
after is new, the count is one.

189
00:08:04,675 --> 00:08:10,155
Now we saw the again, but
now we made the count be two.

190
00:08:10,155 --> 00:08:19,153
Let's print here.

191
00:08:19,153 --> 00:08:22,740
I'll say, existing.

192
00:08:22,740 --> 00:08:24,017
So you can kind of see it.

193
00:08:24,017 --> 00:08:25,817
Now in the print, I'm printing this,

194
00:08:25,817 --> 00:08:27,570
let's make it even a little more verbose.

195
00:08:27,570 --> 00:08:32,331
Print w.

196
00:08:32,331 --> 00:08:36,143
And then I will make it so
it prints the word before

197
00:08:36,143 --> 00:08:39,220
and the count after and then
whether it's existing or new.

198
00:08:39,220 --> 00:08:40,972
So we're gonna put a lot
of print statements in.

199
00:08:40,972 --> 00:08:44,653
Print statements are cheap.

200
00:08:44,653 --> 00:08:46,952
So now, we see the word the,

201
00:08:46,952 --> 00:08:49,157
it's the first time we see
it and we set it to one.

202
00:08:49,157 --> 00:08:50,353
You see the clown?

203
00:08:50,353 --> 00:08:52,153
It's the first time we
see it, we set it to one.

204
00:08:52,153 --> 00:08:55,032
We see ran, new, one.

205
00:08:55,032 --> 00:08:58,805
Later on, we see the, it's already in,

206
00:08:58,805 --> 00:09:02,045
so existing means it was
already in the dictionary.

207
00:09:02,045 --> 00:09:06,004
W, as a key, was already
in the dictionary.

208
00:09:06,004 --> 00:09:07,745
And so that's why we added one to it,

209
00:09:07,745 --> 00:09:11,971
so the old value was one
and then we added di sub the

210
00:09:11,971 --> 00:09:13,187
equals di sub,

211
00:09:13,187 --> 00:09:16,229
di sub the equals di sub the plus one.

212
00:09:16,229 --> 00:09:19,183
W is the string, the, T-H-E,

213
00:09:19,183 --> 00:09:22,086
that's what that string is.

214
00:09:22,086 --> 00:09:24,257
And so we've made it all the way through

215
00:09:24,257 --> 00:09:26,184
and you see the in this one line

216
00:09:26,184 --> 00:09:28,367
occurred, ultimately, seven times.

217
00:09:28,367 --> 00:09:32,593
So now I want to print out the
contents of this dictionary

218
00:09:32,593 --> 00:09:34,114
at the very end of both loops.

219
00:09:34,114 --> 00:09:38,003
So I gotta d indent twice,

220
00:09:38,003 --> 00:09:44,423
and so that will give us the counts.

221
00:09:44,423 --> 00:09:47,442
And so this is what we get
when it's all said and done.

222
00:09:47,442 --> 00:09:50,031
The happens seven times.

223
00:09:50,031 --> 00:09:52,652
But it just worked its way through.

224
00:09:52,652 --> 00:09:55,844
Okay? So you got that.

225
00:09:55,844 --> 00:09:58,759
Now, this is a pretty
verbose way of doing this,

226
00:09:58,759 --> 00:10:00,477
but I did it the slow way to show

227
00:10:00,477 --> 00:10:02,079
that there are two situations,

228
00:10:02,079 --> 00:10:04,006
if it's already there, you increment it,

229
00:10:04,006 --> 00:10:05,643
and if it's not there, you set it to one,

230
00:10:05,643 --> 00:10:07,512
effectively inserting it, right?

231
00:10:07,512 --> 00:10:09,440
So you insert it and set it to one

232
00:10:09,440 --> 00:10:13,259
with this di sub the equals one.

233
00:10:13,259 --> 00:10:15,446
But let's get a little less verbose here,

234
00:10:15,446 --> 00:10:16,905
get rid of some of these print statements

235
00:10:16,905 --> 00:10:23,795
cuz we covered all that.

236
00:10:23,795 --> 00:10:25,188
Get rid of this line,

237
00:10:25,188 --> 00:10:28,102
and go back to printing
w and di w at the end,

238
00:10:28,102 --> 00:10:29,449
we'll leave that one in.

239
00:10:29,449 --> 00:10:30,680
So what I wanna do,

240
00:10:30,680 --> 00:10:32,781
is I wanna look at this
bit of code right here,

241
00:10:32,781 --> 00:10:39,654
this if w in di else.

242
00:10:39,654 --> 00:10:41,256
We do this so much with dictionaries

243
00:10:41,256 --> 00:10:43,811
that there is an easy mechanism

244
00:10:43,811 --> 00:10:46,771
to do this, that combines these four lines

245
00:10:46,771 --> 00:10:49,558
into a single contraction.

246
00:10:49,558 --> 00:10:50,962
And so I'm gonna do this,

247
00:10:50,962 --> 00:10:53,377
I'm gonna print

248
00:10:53,377 --> 00:10:55,467
let's put two stars out,

249
00:10:55,467 --> 00:10:57,887
then the word, and

250
00:10:57,887 --> 00:11:02,264
di dot get of the word

251
00:11:02,264 --> 00:11:06,723
comma negative 99.

252
00:11:06,723 --> 00:11:08,891
Okay, and so

253
00:11:08,891 --> 00:11:11,723
this di dot get of the
word is the important part.

254
00:11:11,723 --> 00:11:14,301
The way it is is, this is a dictionary,

255
00:11:14,301 --> 00:11:16,843
dot get says, in its first parameters,

256
00:11:16,843 --> 00:11:18,898
the key to look up which is word like the

257
00:11:18,898 --> 00:11:21,066
or fell or clown or whatever,

258
00:11:21,066 --> 00:11:23,690
and 99 is the default value that we get

259
00:11:23,690 --> 00:11:25,455
if the key doesn't exist.

260
00:11:25,455 --> 00:11:30,107
So this is an effect, an if then else.

261
00:11:30,107 --> 00:11:32,388
This little di dot get w

262
00:11:32,388 --> 00:11:35,929
negative 99 is,

263
00:11:35,929 --> 00:11:37,311
if it's in there, do one thing,

264
00:11:37,311 --> 00:11:40,051
if it's not in there, do something else.

265
00:11:40,051 --> 00:11:41,607
So let me show you how this works,

266
00:11:41,607 --> 00:11:44,277
and you'll see that the 99 will happen

267
00:11:44,277 --> 00:11:50,790
when,

268
00:11:50,790 --> 00:11:52,404
okay.

269
00:11:52,404 --> 00:11:54,622
So, the first time we see the,

270
00:11:54,622 --> 00:11:56,711
get returns 99.

271
00:11:56,711 --> 00:11:58,290
So let's move it over here.

272
00:11:58,290 --> 00:12:00,496
So the first time we see the,

273
00:12:00,496 --> 00:12:01,971
the is not in the dictionary,

274
00:12:01,971 --> 00:12:06,034
so this di dot get of the
word the in the dictionary

275
00:12:06,034 --> 00:12:10,016
gives us back the negative 99.

276
00:12:10,016 --> 00:12:12,675
And this still is working
and so the is one,

277
00:12:12,675 --> 00:12:16,889
clown is whatever, but away we go.

278
00:12:16,889 --> 00:12:17,795
Now let's do it this way.

279
00:12:17,795 --> 00:12:19,931
Let me count this out,
let me count this one out

280
00:12:19,931 --> 00:12:23,356
and run it again so it's a
little clearer what's going on.

281
00:12:23,356 --> 00:12:24,958
Okay.

282
00:12:24,958 --> 00:12:28,871
So the first time we see the,
the is not in the dictionary,

283
00:12:28,871 --> 00:12:32,563
the first time we see clown,
and we know it's negative 99,

284
00:12:32,563 --> 00:12:35,918
but here, we ask for it and the is one

285
00:12:35,918 --> 00:12:38,948
because we've seen it before.

286
00:12:38,948 --> 00:12:42,025
And so that's just this get mechanism

287
00:12:42,025 --> 00:12:44,974
allows us

288
00:12:44,974 --> 00:12:48,428
to get a new value, or get a value out

289
00:12:48,428 --> 00:12:50,686
if the key exists and specified

290
00:12:50,686 --> 00:12:53,025
a

291
00:12:53,025 --> 00:12:54,380
default if it's not there.

292
00:12:54,380 --> 00:12:57,520
So I'm gonna go oldcount

293
00:12:57,520 --> 00:12:59,285
equals

294
00:12:59,285 --> 00:13:01,046
di dot get

295
00:13:01,046 --> 00:13:04,076
w comma zero.

296
00:13:04,076 --> 00:13:05,795
So instead of using 99 here,

297
00:13:05,795 --> 00:13:07,966
I'm gonna just get rid of all this.

298
00:13:07,966 --> 00:13:09,522
(gunshots)

299
00:13:09,522 --> 00:13:12,227
Is what I'm saying is,
look up in this dictionary,

300
00:13:12,227 --> 00:13:16,000
get is a function that's
part of all dictionaries,

301
00:13:16,000 --> 00:13:18,206
look up using the key w, which is the,

302
00:13:18,206 --> 00:13:22,049
and if I don't get it,

303
00:13:22,049 --> 00:13:23,964
give me back zero.

304
00:13:23,964 --> 00:13:29,247
And so, I'm gonna say print,

305
00:13:29,247 --> 00:13:31,662
word comma

306
00:13:31,662 --> 00:13:34,971
old comma

307
00:13:34,971 --> 00:13:37,026
oldcount.

308
00:13:37,026 --> 00:13:39,615
And now what I can say,
whatever the oldcount is.

309
00:13:39,615 --> 00:13:41,658
It's either the value
that was in there or zero,

310
00:13:41,658 --> 00:13:44,119
and now I can say,

311
00:13:44,119 --> 00:13:52,815
newcount equals oldcount.

312
00:13:52,815 --> 00:13:54,580
And now, let's see, newcount,

313
00:13:54,580 --> 00:13:58,179
and now I can say, dictionary sub word

314
00:13:58,179 --> 00:14:04,460
is equal to newcount.

315
00:14:04,460 --> 00:14:07,362
So I'm gonna get rid of
this if then else then.

316
00:14:07,362 --> 00:14:11,368
This is basically saying, look
up the oldcount that we have,

317
00:14:11,368 --> 00:14:12,807
if you don't find one, use a zero.

318
00:14:12,807 --> 00:14:14,363
We'll print that out

319
00:14:14,363 --> 00:14:25,671
and then I'm gonna say, afterwards,

320
00:14:25,671 --> 00:14:29,619
I'll print the newcount.

321
00:14:29,619 --> 00:14:34,820
And so,

322
00:14:34,820 --> 00:14:37,444
so I'll print the oldcount,

323
00:14:37,444 --> 00:14:39,209
here are some of these blanks,

324
00:14:39,209 --> 00:14:46,058
print the oldcount.

325
00:14:46,058 --> 00:14:48,137
And you can see the oldcount was the

326
00:14:48,137 --> 00:14:49,460
because the doesn't exist,

327
00:14:49,460 --> 00:14:50,969
was zero, the new one's one.

328
00:14:50,969 --> 00:14:52,932
Clown's old is zero, new is one.

329
00:14:52,932 --> 00:14:56,751
Clown's old, ran old zero,
but now we get to the,

330
00:14:56,751 --> 00:15:00,153
its oldcount was was one
and now its newcount is two.

331
00:15:00,153 --> 00:15:01,418
Okay?

332
00:15:01,418 --> 00:15:05,110
So by using this get and
saying, if we don't find it,

333
00:15:05,110 --> 00:15:06,422
we'll assume the count is zero,

334
00:15:06,422 --> 00:15:09,093
that makes a lot of sense, right?

335
00:15:09,093 --> 00:15:12,994
You know.

336
00:15:12,994 --> 00:15:17,916
If not there, the count

337
00:15:17,916 --> 00:15:20,505
is zero.

338
00:15:20,505 --> 00:15:23,164
If the key

339
00:15:23,164 --> 00:15:24,522
is not there,

340
00:15:24,522 --> 00:15:26,531
the count is zero.

341
00:15:26,531 --> 00:15:28,667
So that's what this line does.

342
00:15:28,667 --> 00:15:31,419
Get the value under the key,

343
00:15:31,419 --> 00:15:33,009
(mumbles) where the key,

344
00:15:33,009 --> 00:15:34,936
or give me zero back.

345
00:15:34,936 --> 00:15:36,573
And then I can take that old number

346
00:15:36,573 --> 00:15:38,872
and just add one to it
and then stick it back in.

347
00:15:38,872 --> 00:15:42,843
Now this is ultimately not
how we tend to do it, okay?

348
00:15:42,843 --> 00:15:46,465
We tend to blend this all
into one big, long statement.

349
00:15:46,465 --> 00:15:50,238
Di sub w equals

350
00:15:50,238 --> 00:15:53,222
this part

351
00:15:53,222 --> 00:15:55,266
plus one.

352
00:15:55,266 --> 00:15:59,039
So that says, get the
old value from this key,

353
00:15:59,039 --> 00:16:01,047
or zero, and then add one to it,

354
00:16:01,047 --> 00:16:04,159
cuz that really combines
all of these lines

355
00:16:04,159 --> 00:16:07,363
into a single line, okay?

356
00:16:07,363 --> 00:16:14,004
So I'm gonna delete 'em now.

357
00:16:14,004 --> 00:16:16,291
And now we've combined this all into one,

358
00:16:16,291 --> 00:16:21,864
what effectively is, an idiom.

359
00:16:21,864 --> 00:16:24,639
Retrieve,

360
00:16:24,639 --> 00:16:27,448
create,

361
00:16:27,448 --> 00:16:30,316
update

362
00:16:30,316 --> 00:16:31,721
counter,

363
00:16:31,721 --> 00:16:33,068
all in one line.

364
00:16:33,068 --> 00:16:35,274
I'll still print out, in this case,

365
00:16:35,274 --> 00:16:38,698
I'll just say di sub w,

366
00:16:38,698 --> 00:16:41,566
and then we'll see the counter, okay?

367
00:16:41,566 --> 00:16:47,633
And so now I'll run this.

368
00:16:47,633 --> 00:16:51,219
We have a new, but now we
see the second time it's two,

369
00:16:51,219 --> 00:16:53,600
and so we see car the first time,

370
00:16:53,600 --> 00:16:55,343
we've seen that the
second time, we see car,

371
00:16:55,343 --> 00:16:56,423
I mean the third time,

372
00:16:56,423 --> 00:16:58,048
we see car the second time,

373
00:16:58,048 --> 00:16:59,802
and away we go, okay?

374
00:16:59,802 --> 00:17:01,938
And so that's pretty straightforward,

375
00:17:01,938 --> 00:17:03,819
and so it really,

376
00:17:03,819 --> 00:17:05,954
T-R,

377
00:17:05,954 --> 00:17:07,263
got a typo there.

378
00:17:07,263 --> 00:17:10,502
So let's just get rid of that

379
00:17:10,502 --> 00:17:13,579
and

380
00:17:13,579 --> 00:17:15,135
run it with the clown stuff

381
00:17:15,135 --> 00:17:18,200
and we get the right data there.

382
00:17:18,200 --> 00:17:24,690
And let's run it with intro dot txt.

383
00:17:24,690 --> 00:17:26,744
And there we go, okay?

384
00:17:26,744 --> 00:17:29,775
And so it's tearing out a bunch of words

385
00:17:29,775 --> 00:17:32,318
and giving us a dictionary.

386
00:17:32,318 --> 00:17:35,151
So, that was a lot of work
to get to this line 16

387
00:17:35,151 --> 00:17:37,194
that has the dictionary in it.

388
00:17:37,194 --> 00:17:46,087
Now we wanna find the,

389
00:17:46,087 --> 00:17:51,324
the most common word.

390
00:17:51,324 --> 00:17:53,286
So we're gonna loop
through this dictionary,

391
00:17:53,286 --> 00:17:54,528
and part of it is like,

392
00:17:54,528 --> 00:17:55,910
once we printed this dictionary out

393
00:17:55,910 --> 00:17:57,744
and we verified that it's right,

394
00:17:57,744 --> 00:18:00,112
don't worry too much about
the code up here, right?

395
00:18:00,112 --> 00:18:01,250
Matter of fact, I can take out

396
00:18:01,250 --> 00:18:03,514
some of these print statements,

397
00:18:03,514 --> 00:18:06,498
and we can trust all this.

398
00:18:06,498 --> 00:18:08,309
So now we're gonna work on this.

399
00:18:08,309 --> 00:18:10,445
Okay, now we wanna find
the most common word.

400
00:18:10,445 --> 00:18:11,780
Now this is like a maximum loop,

401
00:18:11,780 --> 00:18:15,066
so if you recall,

402
00:18:15,066 --> 00:18:16,958
we have a whole set of key value pairs,

403
00:18:16,958 --> 00:18:19,304
communicate is to two,

404
00:18:19,304 --> 00:18:20,766
skills is three,

405
00:18:20,766 --> 00:18:22,531
so we have these key value pairs,

406
00:18:22,531 --> 00:18:24,818
and we're gonna loop through
and look for the maximum.

407
00:18:24,818 --> 00:18:27,036
Now, in a dictionary,

408
00:18:27,036 --> 00:18:28,545
we can loop through the key value pairs

409
00:18:28,545 --> 00:18:31,215
with the following syntax:

410
00:18:31,215 --> 00:18:33,758
for

411
00:18:33,758 --> 00:18:37,752
I would call these variables
k and v for key and value,

412
00:18:37,752 --> 00:18:41,490
but yeah, in the dictionary's name

413
00:18:41,490 --> 00:18:43,220
dot items.

414
00:18:43,220 --> 00:18:46,250
And items is a method
inside of all dictionaries

415
00:18:46,250 --> 00:18:49,571
that says, give me the key value pairs,

416
00:18:49,571 --> 00:18:51,301
and we need two iteration variables.

417
00:18:51,301 --> 00:18:53,716
So this is like an assignment
statement for k and v.

418
00:18:53,716 --> 00:18:56,096
K and v take on the successive values

419
00:18:56,096 --> 00:18:58,592
for the key and the value.

420
00:18:58,592 --> 00:18:59,750
Okay?

421
00:18:59,750 --> 00:19:01,836
So if I just now print

422
00:19:01,836 --> 00:19:05,041
k comma v,

423
00:19:05,041 --> 00:19:07,862
and I'll take this print statement out

424
00:19:07,862 --> 00:19:10,405
and then run the code,

425
00:19:10,405 --> 00:19:11,844
on, whoops,

426
00:19:11,844 --> 00:19:15,815
what I forgot, oh, I fell
back into my Python 2 days.

427
00:19:15,815 --> 00:19:18,474
Need parentheses for my print.

428
00:19:18,474 --> 00:19:20,923
So there's clown, and
it just prints it out.

429
00:19:20,923 --> 00:19:22,235
And it's the same thing,

430
00:19:22,235 --> 00:19:26,461
except it's pretty where we're
putting each one on a line.

431
00:19:26,461 --> 00:19:29,155
So the v is the value, so we're looking

432
00:19:29,155 --> 00:19:33,241
for the largest value, oops.

433
00:19:33,241 --> 00:19:35,912
So the thing is, we know that the values

434
00:19:35,912 --> 00:19:39,070
are always numbers that
are greater than one,

435
00:19:39,070 --> 00:19:42,425
so I'm gonna do

436
00:19:42,425 --> 00:19:44,712
a quickie maximum loop.

437
00:19:44,712 --> 00:19:48,157
Largest equals negative one.

438
00:19:48,157 --> 00:19:49,640
Now in previous times, we've seen that

439
00:19:49,640 --> 00:19:51,080
this is a bad assumption,

440
00:19:51,080 --> 00:19:53,448
because we know these are
counters that are always positive,

441
00:19:53,448 --> 00:19:56,351
it turns out this is not a bad idea.

442
00:19:56,351 --> 00:20:00,170
And so I can say, if the value

443
00:20:00,170 --> 00:20:07,937
is greater than the
largest we've seen so far,

444
00:20:07,937 --> 00:20:13,824
largest equals the value.

445
00:20:13,824 --> 00:20:15,182
Okay?

446
00:20:15,182 --> 00:20:26,489
And when that loop is all
done, we can print the largest.

447
00:20:26,489 --> 00:20:27,509
Okay?

448
00:20:27,509 --> 00:20:29,436
And so this is just a max loop

449
00:20:29,436 --> 00:20:30,539
and we're using this value,

450
00:20:30,539 --> 00:20:33,836
that's the number, the
value is the second thing.

451
00:20:33,836 --> 00:20:40,593
Oops.

452
00:20:40,593 --> 00:20:48,302
Ah, can't type python.

453
00:20:48,302 --> 00:20:50,717
Oh, it's a typo.

454
00:20:50,717 --> 00:20:53,434
Yeah, I'm not using value, I'm using v.

455
00:20:53,434 --> 00:20:58,252
So largest equals v, let's try it again.

456
00:20:58,252 --> 00:20:59,657
Okay, so we're all done with seven,

457
00:20:59,657 --> 00:21:02,443
so these were the things
that we were looking for,

458
00:21:02,443 --> 00:21:04,324
and it was looking for the maximum

459
00:21:04,324 --> 00:21:07,319
and it just dutifully found
seven was the largest,

460
00:21:07,319 --> 00:21:09,699
but we also wanna know what the word is.

461
00:21:09,699 --> 00:21:11,859
And so what we can say here is,

462
00:21:11,859 --> 00:21:15,551
we can say the word is none,

463
00:21:15,551 --> 00:21:18,825
meaning it's like, we don't
know what the word is,

464
00:21:18,825 --> 00:21:22,598
and then whenever we catch
this new largest number,

465
00:21:22,598 --> 00:21:26,220
we say, theword equals w.

466
00:21:26,220 --> 00:21:28,926
So I like to think of this as

467
00:21:28,926 --> 00:21:34,812
capture remember

468
00:21:34,812 --> 00:21:39,131
the word that was largest.

469
00:21:39,131 --> 00:21:40,974
Right? That's what I'm doing.

470
00:21:40,974 --> 00:21:43,629
R, remem, E-M,

471
00:21:43,629 --> 00:21:47,376
R-E-M-E-M,

472
00:21:47,376 --> 00:21:48,514
remember.

473
00:21:48,514 --> 00:21:51,379
Right, that's, R-E-M-E-M-B-E-R.

474
00:21:51,379 --> 00:21:53,477
There we go.

475
00:21:53,477 --> 00:21:56,542
So this trick here is,

476
00:21:56,542 --> 00:21:58,533
not only knowing what
the largest number was,

477
00:21:58,533 --> 00:22:01,331
but the word that was associated
with the largest number.

478
00:22:01,331 --> 00:22:02,886
So now I can print out at the end,

479
00:22:02,886 --> 00:22:10,851
theword and the largest,
and that's the count.

480
00:22:10,851 --> 00:22:14,775
Okay, and so now we know that,

481
00:22:14,775 --> 00:22:22,449
oops, did we make a mistake here?

482
00:22:22,449 --> 00:22:24,493
Okay, that does not look good,

483
00:22:24,493 --> 00:22:29,392
cuz it says car and seven.

484
00:22:29,392 --> 00:22:32,759
If v is greater than the largest,

485
00:22:32,759 --> 00:22:34,895
oh, it's not w.

486
00:22:34,895 --> 00:22:36,288
(laughs)

487
00:22:36,288 --> 00:22:38,007
I used a really bad variable.

488
00:22:38,007 --> 00:22:40,062
See that's the whole value there.

489
00:22:40,062 --> 00:22:41,083
There we go.

490
00:22:41,083 --> 00:22:44,311
It's k, which is the key.

491
00:22:44,311 --> 00:22:46,563
Key (laughs).

492
00:22:46,563 --> 00:22:48,699
I was gonna say, that was quite the bug.

493
00:22:48,699 --> 00:22:49,640
See what happened there?

494
00:22:49,640 --> 00:22:52,229
I had this as w and it
just happened to be,

495
00:22:52,229 --> 00:22:57,883
it was the last word on the file.

496
00:22:57,883 --> 00:23:00,228
Car, the last word on the file,

497
00:23:00,228 --> 00:23:03,769
because I used the wrong variable.

498
00:23:03,769 --> 00:23:06,056
Right?

499
00:23:06,056 --> 00:23:10,770
Little mistakes, little mistakes.

500
00:23:10,770 --> 00:23:12,825
The and seven.

501
00:23:12,825 --> 00:23:14,984
Okay, so let's get rid
of this print statement

502
00:23:14,984 --> 00:23:17,666
cuz we know what's going on here.

503
00:23:17,666 --> 00:23:26,525
And away we go, and this
should now work if we run it.

504
00:23:26,525 --> 00:23:32,573
We can even get rid of the word done here.

505
00:23:32,573 --> 00:23:33,804
There we go, the, seven.

506
00:23:33,804 --> 00:23:35,279
Now, the cool thing about this is,

507
00:23:35,279 --> 00:23:38,111
this code runs just as
easily with one line of code

508
00:23:38,111 --> 00:23:41,443
or the intro of the book, intro dot txt,

509
00:23:41,443 --> 00:23:44,392
and not surprisingly, the is
still the most common word

510
00:23:44,392 --> 00:23:47,678
in the introduction dot txt,
I seem to like that word,

511
00:23:47,678 --> 00:23:49,896
and it's 226 times.

512
00:23:49,896 --> 00:23:52,833
Okay, and so that is the basic pattern

513
00:23:52,833 --> 00:23:56,920
of reading some, this is just a word loop.

514
00:23:56,920 --> 00:23:59,334
Now sometimes there would be some

515
00:23:59,334 --> 00:24:01,540
checking to see if the line is
the one you're interested in,

516
00:24:01,540 --> 00:24:03,061
maybe tearing apart the line,

517
00:24:03,061 --> 00:24:04,489
but at the end of the day,

518
00:24:04,489 --> 00:24:07,682
this idiom of starting a dictionary.

519
00:24:07,682 --> 00:24:09,447
Now it's a common problem to know

520
00:24:09,447 --> 00:24:10,759
where to start the dictionary.

521
00:24:10,759 --> 00:24:13,383
You want to accumulate the
numbers for the whole file,

522
00:24:13,383 --> 00:24:14,694
so you don't want to put it

523
00:24:14,694 --> 00:24:17,202
in between line six and line seven.

524
00:24:17,202 --> 00:24:18,468
Okay?

525
00:24:18,468 --> 00:24:21,962
So I hope that particular
thing helps a little bit,

526
00:24:21,962 --> 00:24:23,549
helps you understand dictionaries.

