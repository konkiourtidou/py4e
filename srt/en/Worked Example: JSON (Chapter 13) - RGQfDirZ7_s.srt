1
00:00:00,481 --> 00:00:08,039
(slow piano music)

2
00:00:08,039 --> 00:00:08,879
- [Instructor] Hello everybody,

3
00:00:08,879 --> 00:00:10,616
welcome to Python for Everybody.

4
00:00:10,616 --> 00:00:15,209
We're playing with the web
services chapter right now

5
00:00:15,209 --> 00:00:17,106
and if you want to

6
00:00:17,106 --> 00:00:19,405
get the materials

7
00:00:19,405 --> 00:00:21,213
for this course

8
00:00:21,213 --> 00:00:22,963
you can

9
00:00:22,963 --> 00:00:26,018
go here and download the sample zip

10
00:00:26,018 --> 00:00:27,214
samplecode.zip.

11
00:00:27,214 --> 00:00:30,290
I've got this all sitting
already on my computer.

12
00:00:30,290 --> 00:00:31,939
I also have the whole
thing in GitHub if you

13
00:00:31,939 --> 00:00:33,541
wanna get it out of GitHub.

14
00:00:33,541 --> 00:00:35,143
So the thing we're talking about now is

15
00:00:35,143 --> 00:00:38,847
we're talking about the
json1.py example from the book.

16
00:00:38,847 --> 00:00:43,154
And, so, JSON is kinda like
XML except a lot simpler

17
00:00:43,154 --> 00:00:45,790
and that's why a lot of people like it.

18
00:00:45,790 --> 00:00:48,123
It's not that JSON is
always better but JSON

19
00:00:48,123 --> 00:00:51,246
is better in a lot of
situations that don't require

20
00:00:51,246 --> 00:00:52,965
the complexity of XML.

21
00:00:52,965 --> 00:00:56,866
So, we start to import JSON,
JSON is built into python

22
00:00:56,866 --> 00:00:58,688
but we have to ask to import it.

23
00:00:58,688 --> 00:01:00,918
Again, we're using a triple quoted string

24
00:01:00,918 --> 00:01:03,913
to put the JSON in there.

25
00:01:03,913 --> 00:01:06,932
And JSON looks a lot
like python dictionaries:

26
00:01:06,932 --> 00:01:07,765
key-value pairs,

27
00:01:07,765 --> 00:01:08,917
key-value pairs.

28
00:01:08,917 --> 00:01:10,635
In this case, this is a key

29
00:01:10,635 --> 00:01:13,921
and the value itself is another dictionary

30
00:01:13,921 --> 00:01:16,661
or in JSON terms: an object,

31
00:01:16,661 --> 00:01:18,477
but again key-value pairs
within key-value pairs

32
00:01:18,477 --> 00:01:20,085
within key-value pairs.

33
00:01:20,085 --> 00:01:21,269
And all these little cursor guys,

34
00:01:21,269 --> 00:01:26,401
all these little curly brace
guys have to line up properly.

35
00:01:26,401 --> 00:01:28,969
And so, like all the time,

36
00:01:28,969 --> 00:01:30,899
this is

37
00:01:30,899 --> 00:01:31,967
a string which we normally

38
00:01:31,967 --> 00:01:34,336
would read and decode from
the Internet but for now

39
00:01:34,336 --> 00:01:36,100
we're just gonna have it in there.

40
00:01:36,100 --> 00:01:39,011
Load json.loads says go in
the JSON library and pull out

41
00:01:39,011 --> 00:01:41,357
load string and parse this

42
00:01:41,357 --> 00:01:44,957
which turns this set of curly braces,

43
00:01:44,957 --> 00:01:46,303
spaces, commas,

44
00:01:46,303 --> 00:01:49,507
perhaps syntax errors
into a structured object.

45
00:01:49,507 --> 00:01:52,073
And if we'd made a syntax error in here

46
00:01:52,073 --> 00:01:53,477
then this would blow up.

47
00:01:53,477 --> 00:01:55,521
But if this doesn't make a syntax error,

48
00:01:55,521 --> 00:01:56,426
if this doesn't blow up

49
00:01:56,426 --> 00:01:59,480
then we have a structured representation.

50
00:01:59,480 --> 00:02:03,276
Now the difference between XML and JSON

51
00:02:03,276 --> 00:02:06,713
is that this turns into
a python dictionary

52
00:02:06,713 --> 00:02:08,036
with key-value pairs.

53
00:02:08,036 --> 00:02:08,869
Okay?

54
00:02:08,869 --> 00:02:12,251
And so once we have this,
this is a dictionary

55
00:02:12,251 --> 00:02:14,840
and we can say info sub name

56
00:02:14,840 --> 00:02:16,256
And that's the exact syntax

57
00:02:16,256 --> 00:02:17,890
that we would use to get the dictionary

58
00:02:17,890 --> 00:02:20,885
and that's gonna extract
this value out of there.

59
00:02:20,885 --> 00:02:24,090
And if we wanna go in deeper, we can say

60
00:02:24,090 --> 00:02:25,724
info sub email and that's

61
00:02:25,724 --> 00:02:28,603
what info sub email is right there.

62
00:02:28,603 --> 00:02:29,961
And then sub hide.

63
00:02:29,961 --> 00:02:32,899
So that's a dictionary
within a dictionary.

64
00:02:32,899 --> 00:02:34,988
So, if we run this,

65
00:02:34,988 --> 00:02:36,950
python3

66
00:02:36,950 --> 00:02:39,470
json

67
00:02:39,470 --> 00:02:41,478
1.py

68
00:02:41,478 --> 00:02:42,872
it digs in really fast.

69
00:02:42,872 --> 00:02:45,101
And so this is why
people tend to like JSON

70
00:02:45,101 --> 00:02:47,841
is because you read the
JSON which is actually

71
00:02:47,841 --> 00:02:49,733
a syntax derived from Javascript,

72
00:02:49,733 --> 00:02:53,228
but it looks just like
the syntax for python.

73
00:02:53,228 --> 00:02:55,852
So, that's moving an object,

74
00:02:55,852 --> 00:03:00,426
a JSON object that turns
directly into a python dictionary

75
00:03:00,426 --> 00:03:01,912
with nested dictionaries.

76
00:03:01,912 --> 00:03:03,917
Now, we're going to look at json2.

77
00:03:03,917 --> 00:03:06,623
And, so, json2, we're going to see a list

78
00:03:06,623 --> 00:03:09,200
or an array in JSON terms

79
00:03:09,200 --> 00:03:11,661
but it turns into a list in python terms.

80
00:03:11,661 --> 00:03:15,516
So, this is a list of dictionaries.

81
00:03:15,516 --> 00:03:18,314
In Javascript that would
be an array of objects

82
00:03:18,314 --> 00:03:20,450
but in python it's a list of dictionaries.

83
00:03:20,450 --> 00:03:23,283
So, we'll just pretend it's
a list of dictionaries.

84
00:03:23,283 --> 00:03:26,766
Again, we load the string, parsing,

85
00:03:26,766 --> 00:03:30,017
looking for syntax errors, so
let's just make a syntax error

86
00:03:30,017 --> 00:03:31,747
here and run

87
00:03:31,747 --> 00:03:33,538
python

88
00:03:33,538 --> 00:03:34,795
json2.py

89
00:03:34,795 --> 00:03:36,687
and you'll see where it blows up.

90
00:03:36,687 --> 00:03:38,452
It blows up at line 15

91
00:03:38,452 --> 00:03:40,112
which is right here.

92
00:03:40,112 --> 00:03:41,923
It's like this load s blows up.

93
00:03:41,923 --> 00:03:44,304
Now, you could put try
except around it to save it

94
00:03:44,304 --> 00:03:45,778
but we're not gonna do that.

95
00:03:45,778 --> 00:03:48,402
And it even complains, it
says: look we're expecting

96
00:03:48,402 --> 00:03:52,094
something here in line 11 and
that's line 11 of the JSON

97
00:03:52,094 --> 00:03:55,705
which starts on line 4.

98
00:03:55,705 --> 00:03:58,061
And so I'll put my little
square brace back in

99
00:03:58,061 --> 00:04:00,383
so it's not syntactically broken.

100
00:04:00,383 --> 00:04:03,042
So, let's run it again and
make sure that she runs

101
00:04:03,042 --> 00:04:04,273
and yes she does.

102
00:04:04,273 --> 00:04:09,149
So, this parses it and
converts from the JSON syntax

103
00:04:09,149 --> 00:04:12,736
into a python, in this case, list,

104
00:04:12,736 --> 00:04:15,558
because it's got square braces
instead of curly braces.

105
00:04:15,558 --> 00:04:18,390
The previous example had square braces

106
00:04:18,390 --> 00:04:21,630
and we can then take a LEN
of it and it's an array,

107
00:04:21,630 --> 00:04:22,651
it's a list.

108
00:04:22,651 --> 00:04:24,834
And we see there are two things in there

109
00:04:24,834 --> 00:04:26,239
and now we're gonna iterate through

110
00:04:26,239 --> 00:04:28,700
and this item is gonna iterate
through these dictionaries,

111
00:04:28,700 --> 00:04:30,976
that dictionary followed
by that dictionary.

112
00:04:30,976 --> 00:04:32,856
So, the first time, it's item,

113
00:04:32,856 --> 00:04:33,762
sub,

114
00:04:33,762 --> 00:04:35,248
name,

115
00:04:35,248 --> 00:04:37,013
which is this value right here.

116
00:04:37,013 --> 00:04:38,952
And then item, sub, id,

117
00:04:38,952 --> 00:04:40,031
which is this value,

118
00:04:40,031 --> 00:04:43,224
so you can dig right into
this but you're not using

119
00:04:43,224 --> 00:04:46,173
get and you're not using
the weird extra find

120
00:04:46,173 --> 00:04:48,199
or find all or anything.

121
00:04:48,199 --> 00:04:51,804
You just are going at
these structures directly.

122
00:04:51,804 --> 00:04:54,509
And so you can quickly
extract this stuff out

123
00:04:54,509 --> 00:04:58,236
and we read through "id" is 001,

124
00:04:58,236 --> 00:05:01,696
"name" is Chuck ...

125
00:05:01,696 --> 00:05:04,888
There are no attributes, by the way.

126
00:05:04,888 --> 00:05:06,247
"x" is 2

127
00:05:06,247 --> 00:05:07,733
So we had to make x.

128
00:05:07,733 --> 00:05:10,519
So if you look at the XML we
had this concept of attributes

129
00:05:10,519 --> 00:05:13,468
on the outer tag, these
things are also not named,

130
00:05:13,468 --> 00:05:15,453
we just have to know
what we're looking for.

131
00:05:15,453 --> 00:05:17,566
So, JSON represents simple structures

132
00:05:17,566 --> 00:05:20,973
but it's much simpler

133
00:05:20,973 --> 00:05:21,806
to use.

134
00:05:21,806 --> 00:05:26,230
So, I hope this has been useful to you

135
00:05:26,230 --> 00:05:30,170
and talk to you in a bit
about some more JSON.

136
00:05:30,170 --> 00:05:33,087
(slow piano music)

