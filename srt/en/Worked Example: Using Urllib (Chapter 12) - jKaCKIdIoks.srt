1
00:00:00,713 --> 00:00:08,272
(jazz music)

2
00:00:08,272 --> 00:00:10,410
- [Narrator] Welcome to
Python for Everybody.

3
00:00:10,410 --> 00:00:13,910
We are going to be
talking about some code.

4
00:00:13,910 --> 00:00:15,076
If you want to download all the code,

5
00:00:15,076 --> 00:00:15,952
it's right here.

6
00:00:15,952 --> 00:00:18,326
It's all single big zip file.

7
00:00:18,326 --> 00:00:20,950
And all the sample code,

8
00:00:20,950 --> 00:00:21,917
the one I'm going to talk about

9
00:00:21,917 --> 00:00:23,738
is urllib1.py.

10
00:00:23,738 --> 00:00:26,601
It is not very exciting,

11
00:00:26,601 --> 00:00:28,126
it's short.

12
00:00:28,126 --> 00:00:32,216
That's what's kind of
nice about python code.

13
00:00:32,216 --> 00:00:33,256
And it's really,

14
00:00:33,256 --> 00:00:35,240
if we go and take a look
at the code we played with

15
00:00:35,240 --> 00:00:36,182
just previously,

16
00:00:36,182 --> 00:00:37,771
which is socket.

17
00:00:37,771 --> 00:00:40,068
The idea here is urllib is something

18
00:00:40,068 --> 00:00:42,175
that Python has produced for us

19
00:00:42,175 --> 00:00:45,740
to make socket communications
and http communications

20
00:00:45,740 --> 00:00:46,960
a lot better.

21
00:00:46,960 --> 00:00:47,793
So socket,

22
00:00:47,793 --> 00:00:50,633
this is making socket calls underneath it,

23
00:00:50,633 --> 00:00:53,309
but there's a library that
makes this quite simple.

24
00:00:53,309 --> 00:00:56,025
And so we have to do some imports,

25
00:00:56,025 --> 00:00:58,284
and instead of importing
socket, we'll import these,

26
00:00:58,284 --> 00:00:59,904
we are going to create a handle,

27
00:00:59,904 --> 00:01:01,711
urllib.request.urlopen

28
00:01:01,711 --> 00:01:03,242
and just pass in a string.

29
00:01:03,242 --> 00:01:04,985
So we're not encoding this,

30
00:01:04,985 --> 00:01:06,303
we're not sending get command.

31
00:01:06,303 --> 00:01:09,670
All the stuff we did in the
previous sockets example is gone

32
00:01:09,670 --> 00:01:12,015
and then we can just
put this as a for-loop.

33
00:01:12,015 --> 00:01:14,562
And so we're not using this
lower level read and write code,

34
00:01:14,562 --> 00:01:16,105
we're just using a for-loop.

35
00:01:16,105 --> 00:01:18,482
And so that's literally
is going to read the text

36
00:01:18,482 --> 00:01:20,566
line by line.

37
00:01:20,566 --> 00:01:23,288
And the line does come
back as an array of bites

38
00:01:23,288 --> 00:01:24,348
so we have to do a decode,

39
00:01:24,348 --> 00:01:25,754
but then we gotta have string,

40
00:01:25,754 --> 00:01:27,193
and then we can do a strip on it.

41
00:01:27,193 --> 00:01:32,121
So this is like a super simple,

42
00:01:32,121 --> 00:01:35,657
super simple.

43
00:01:35,657 --> 00:01:36,700
So there we go.

44
00:01:36,700 --> 00:01:39,426
Now the interesting thing is
you also don't see the headers,

45
00:01:39,426 --> 00:01:41,008
we just read the contents.

46
00:01:41,008 --> 00:01:42,645
Now it turns out in urllib,

47
00:01:42,645 --> 00:01:45,320
we'll see this in later
more complex application,

48
00:01:45,320 --> 00:01:47,815
you can get the headers if you want,

49
00:01:47,815 --> 00:01:49,967
you can get various other things.

50
00:01:49,967 --> 00:01:52,479
So that's urllib,

51
00:01:52,479 --> 00:01:59,509
a simple urllib tool.

52
00:01:59,509 --> 00:02:02,422
Now we can also use this in urllib words

53
00:02:02,422 --> 00:02:04,684
to show you something quite interesting

54
00:02:04,684 --> 00:02:05,517
and that is,

55
00:02:05,517 --> 00:02:08,139
if you look at this from right here,

56
00:02:08,139 --> 00:02:09,363
other than the decode,

57
00:02:09,363 --> 00:02:11,344
this is exactly the code we wrote

58
00:02:11,344 --> 00:02:14,462
to compute the words, right.

59
00:02:14,462 --> 00:02:15,295
So line,

60
00:02:15,295 --> 00:02:16,679
and then this line.decode,

61
00:02:16,679 --> 00:02:19,260
this is just a open something up,

62
00:02:19,260 --> 00:02:21,079
in this case we're going to open a url,

63
00:02:21,079 --> 00:02:22,201
we're gonna create a dictionary.

64
00:02:22,201 --> 00:02:24,729
We're gonna loop through each
of the lines in that thing,

65
00:02:24,729 --> 00:02:26,879
we're gonna decode them
and then split them.

66
00:02:26,879 --> 00:02:28,388
So once you do line.decode,

67
00:02:28,388 --> 00:02:31,268
this is now a legitimate
internal Python string.

68
00:02:31,268 --> 00:02:32,203
We split it,

69
00:02:32,203 --> 00:02:33,285
we run through the words,

70
00:02:33,285 --> 00:02:34,968
and run the counts.

71
00:02:34,968 --> 00:02:38,335
So this is exactly like
code that we did before

72
00:02:38,335 --> 00:02:39,860
to run counts.

73
00:02:39,860 --> 00:02:41,664
And so,

74
00:02:41,664 --> 00:02:44,017
python3

75
00:02:44,017 --> 00:02:48,961
urlwords.

76
00:02:48,961 --> 00:02:50,337
And so that gives us a dictionary

77
00:02:50,337 --> 00:02:52,037
which is the word frequency.

78
00:02:52,037 --> 00:02:54,790
And we could do all kinds
of crazy stuff in here,

79
00:02:54,790 --> 00:02:56,932
you know, with assorting
and the kinds of things.

80
00:02:56,932 --> 00:02:59,114
But the important thing
is once you've done

81
00:02:59,114 --> 00:03:00,363
this and this,

82
00:03:00,363 --> 00:03:01,196
the code,

83
00:03:01,196 --> 00:03:02,749
other than the need to decode these lines

84
00:03:02,749 --> 00:03:04,944
when you first get them,

85
00:03:04,944 --> 00:03:08,930
it really works just like makes a urllib

86
00:03:08,930 --> 00:03:12,427
makes url's function inside Python

87
00:03:12,427 --> 00:03:14,572
very much like files.

88
00:03:14,572 --> 00:03:16,900
So these are short and to the point

89
00:03:16,900 --> 00:03:17,733
and very simple,

90
00:03:17,733 --> 00:03:21,214
and I hope that they were useful to you.

91
00:03:21,214 --> 00:03:23,631
(jazz music)

