1
00:00:07,823 --> 00:00:09,844
- Hello everybody and welcome
to Python for Everybody

2
00:00:09,844 --> 00:00:12,447
we are going to be doing
some code walk throughs

3
00:00:12,447 --> 00:00:15,280
if you want the sample code
you can download the zip

4
00:00:15,280 --> 00:00:16,834
from our website.

5
00:00:16,834 --> 00:00:20,824
The work that we're doing right
now is we are in the process

6
00:00:20,824 --> 00:00:24,427
of building a spider
and visualization tool

7
00:00:24,427 --> 00:00:28,660
for email data that came originally

8
00:00:28,660 --> 00:00:32,460
from this website gmane, but
I've got my own copy of it.

9
00:00:32,460 --> 00:00:35,067
And so what we've done
before is we ran gmane.py

10
00:00:35,067 --> 00:00:40,077
and I grabbed a url,

11
00:00:40,077 --> 00:00:43,812
I have a url that has all this data

12
00:00:43,812 --> 00:00:47,315
and I downloaded that and
then I ran gmane again

13
00:00:47,315 --> 00:00:51,964
to catch up so it took
quite a bit of catching up

14
00:00:51,964 --> 00:00:54,417
but by the time I get
to, remember how I said

15
00:00:54,417 --> 00:00:56,445
it tries to fail five times?

16
00:00:56,445 --> 00:01:00,728
Well it ran out of data at 60,421

17
00:01:00,728 --> 00:01:03,886
and then it started
failing and then it quit.

18
00:01:03,886 --> 00:01:06,807
So we pretty much have all of our data now

19
00:01:06,807 --> 00:01:13,724
we have finished this
process in content.sqlite

20
00:01:13,724 --> 00:01:18,798
and if I take a look in
the data base browser

21
00:01:18,798 --> 00:01:22,423
we can see we've got 59,823 email messages

22
00:01:22,423 --> 00:01:25,312
and so if I look at any
of these things you see

23
00:01:25,312 --> 00:01:27,986
the headers, you see the subject line,

24
00:01:27,986 --> 00:01:31,229
you see the email address
you see the body of it

25
00:01:31,229 --> 00:01:33,376
remember I split the body in half

26
00:01:33,376 --> 00:01:37,270
and headers and so that's,

27
00:01:37,270 --> 00:01:41,583
I made this as raw as I possibly
could because as you saw

28
00:01:41,583 --> 00:01:43,939
I had to spend so much time in the gmane

29
00:01:43,939 --> 00:01:47,057
just getting the data
successfully retrieved

30
00:01:47,057 --> 00:01:49,921
and so I don't like cleaning
the data up too much.

31
00:01:49,921 --> 00:01:51,788
So what we're gonna look at next,

32
00:01:51,788 --> 00:01:57,116
is the data cleaning process.

33
00:01:57,116 --> 00:02:01,032
There's a gmodel.py is what
we're gonna take a look at now.

34
00:02:01,032 --> 00:02:08,755
So let's get rid of those
guys and look at gmodel.py.

35
00:02:08,755 --> 00:02:11,714
I don't think I need urllib in this code,

36
00:02:11,714 --> 00:02:17,866
do I have any urllib?

37
00:02:17,866 --> 00:02:23,488
No. So I don't need that sorry, fix that.

38
00:02:23,488 --> 00:02:26,363
So it's gonna read from the
database it's got a call

39
00:02:26,363 --> 00:02:28,285
it's gonna use regular expressions

40
00:02:28,285 --> 00:02:30,342
and zlib is a way to do some compression

41
00:02:30,342 --> 00:02:32,808
in this one I'm gonna
compress some of the data

42
00:02:32,808 --> 00:02:34,765
to make it so that I have less data

43
00:02:34,765 --> 00:02:37,220
some of the text fields
are gonna be compressed.

44
00:02:37,220 --> 00:02:38,890
I wanted to keep these fields

45
00:02:38,890 --> 00:02:43,349
uncompressed inside of messages.

46
00:02:43,349 --> 00:02:46,471
So we have some just clean up messages

47
00:02:46,471 --> 00:02:49,464
and cleans things up and it turns out

48
00:02:49,464 --> 00:02:52,241
that the way email
addresses in this particular

49
00:02:52,241 --> 00:02:56,108
mail corpus they changed over time

50
00:02:56,108 --> 00:03:00,338
and there's certain
kinds of things sometimes

51
00:03:00,338 --> 00:03:02,857
the gmane.org is the
email address when people

52
00:03:02,857 --> 00:03:06,287
wanna hide their address and
I made all kinds of stuff

53
00:03:06,287 --> 00:03:08,960
and I split it and checked
to see if it end with this

54
00:03:08,960 --> 00:03:12,863
and I cleaned up things this
that and the other thing

55
00:03:12,863 --> 00:03:17,003
and so I have all kinds of
clean up stuff going on in here

56
00:03:17,003 --> 00:03:19,132
and just mapping and DNS mapping

57
00:03:19,132 --> 00:03:23,032
that I'll talk about in a bit
where organizations sometimes

58
00:03:23,032 --> 00:03:25,708
sent email with different
addresses over time

59
00:03:25,708 --> 00:03:28,628
and people sent email from different time.

60
00:03:28,628 --> 00:03:31,995
And we're gonna do the parsing of the date

61
00:03:31,995 --> 00:03:35,823
and that is the code for that.

62
00:03:35,823 --> 00:03:38,211
We're gonna pull out
the header information

63
00:03:38,211 --> 00:03:43,198
this is sort of borrowed
from the other code,

64
00:03:43,198 --> 00:03:48,360
we'll clean up the email
addresses and the domain names,

65
00:03:48,360 --> 00:03:51,042
and we'll pull the data
out, pull the subject out,

66
00:03:51,042 --> 00:03:54,627
pull out the message id, various things.

67
00:03:54,627 --> 00:03:57,021
So here's the main body of the code.

68
00:03:57,021 --> 00:04:01,288
We're gonna go from
content.sglite to index.sqlite

69
00:04:01,288 --> 00:04:04,630
and what I'm going to do every time

70
00:04:04,630 --> 00:04:06,654
is I'm going to wipe out index.sqlite

71
00:04:06,654 --> 00:04:09,932
and drop the messages,
senders, subjects, and replies

72
00:04:09,932 --> 00:04:11,828
so this is a normalized database

73
00:04:11,828 --> 00:04:13,376
in that it has foreign keys.

74
00:04:13,376 --> 00:04:15,704
So there's a messages table here,

75
00:04:15,704 --> 00:04:18,498
with an integer primary
key, the guid for it.

76
00:04:18,498 --> 00:04:22,612
Guid stands for Global Unique
Id, sent times under id,

77
00:04:22,612 --> 00:04:26,096
and it's gonna have a BLOB.

78
00:04:26,096 --> 00:04:28,387
These are BLOBs, binary
large objects for the headers

79
00:04:28,387 --> 00:04:31,278
and the body cause I'm gonna
compress them in this database

80
00:04:31,278 --> 00:04:33,334
to make them.

81
00:04:33,334 --> 00:04:37,491
And then the senders,
each sender has a key,

82
00:04:37,491 --> 00:04:41,490
and then subjects, each subject
line is gonna have a key,

83
00:04:41,490 --> 00:04:43,942
and then replies are a connection

84
00:04:43,942 --> 00:04:46,973
from one message to another and so

85
00:04:46,973 --> 00:04:48,441
this is like a many to many.

86
00:04:48,441 --> 00:04:51,726
Now, I also have this
file called mapping.sqlite

87
00:04:51,726 --> 00:04:57,010
so we can take a look at
that one, mapping.sqlite.

88
00:04:57,010 --> 00:05:01,973
And so what happened
is this has two tables

89
00:05:01,973 --> 00:05:05,499
that I hand deal with,
and so sometimes indiana--

90
00:05:05,499 --> 00:05:08,517
this was a email address
that mapped to that.

91
00:05:08,517 --> 00:05:14,164
So indiana.edu that's a way to
take and ax the email address

92
00:05:14,164 --> 00:05:17,232
and then these were a
bunch of people that had

93
00:05:17,232 --> 00:05:20,256
email addresses changing
throughout the project

94
00:05:20,256 --> 00:05:22,911
and I just sort of kind
of mapped them in a way.

95
00:05:22,911 --> 00:05:26,647
So this is just sort of like
a, I pull this in really quick,

96
00:05:26,647 --> 00:05:30,914
and I read all this stuff
from the DNS mapping and I,

97
00:05:30,914 --> 00:05:34,872
other than stripping and making
this lowercase et cetera,

98
00:05:34,872 --> 00:05:38,473
I just am gonna make a dictionary.

99
00:05:38,473 --> 00:05:42,053
DNS mapping which is the old
name to the new name and the

100
00:05:42,053 --> 00:05:46,357
email address mapping from
the old name to the new name

101
00:05:46,357 --> 00:05:47,705
and I'm using fix sender.

102
00:05:47,705 --> 00:05:49,928
Fix sender is cause the email addresses

103
00:05:49,928 --> 00:05:52,199
even within gmane were kind of funky.

104
00:05:52,199 --> 00:05:57,215
So don't worry so much about this, okay.

105
00:05:57,215 --> 00:06:00,967
So now what I'm gonna do
is I opened up a connection

106
00:06:00,967 --> 00:06:02,773
just to read all of that stuff in,

107
00:06:02,773 --> 00:06:05,410
and now I'm going to actually
open the main content

108
00:06:05,410 --> 00:06:07,845
and I'm asking it to open
this a little trickier

109
00:06:07,845 --> 00:06:08,879
I open that read only.

110
00:06:08,879 --> 00:06:12,063
That was so that I could
potentially be running

111
00:06:12,063 --> 00:06:14,409
the spider and running
this at the same time.

112
00:06:14,409 --> 00:06:18,668
I get a cursor and so
I'm gonna read through,

113
00:06:18,668 --> 00:06:22,225
so in the content file this is the big one

114
00:06:22,225 --> 00:06:24,923
I'm gonna read through
and go through every one

115
00:06:24,923 --> 00:06:27,865
and write all of these things in.

116
00:06:27,865 --> 00:06:31,161
I'm gonna take all the email addresses

117
00:06:31,161 --> 00:06:36,382
and I'm going to put those in a list

118
00:06:36,382 --> 00:06:40,367
so I loaded that, I've
got the mappings loaded,

119
00:06:40,367 --> 00:06:43,535
and so now I'm going to go
through every single message

120
00:06:43,535 --> 00:06:45,883
I got all the senders, all the subjects,

121
00:06:45,883 --> 00:06:48,280
and all the global unique ids.

122
00:06:48,280 --> 00:06:50,464
So I read in each message,

123
00:06:50,464 --> 00:06:55,060
so now I'm going through
content one at a time,

124
00:06:55,060 --> 00:07:01,112
I parse the headers,

125
00:07:01,112 --> 00:07:06,691
I check to see if the
sender's name email address

126
00:07:06,691 --> 00:07:09,903
after it's been cleaned
up is in my mapping,

127
00:07:09,903 --> 00:07:12,648
mapping.getsender and the
default is I get back sender

128
00:07:12,648 --> 00:07:14,265
that's what that's saying.

129
00:07:14,265 --> 00:07:16,321
Look up sender if it's in there,

130
00:07:16,321 --> 00:07:18,177
give me the entry of that key

131
00:07:18,177 --> 00:07:21,358
otherwise give me sender back.

132
00:07:21,358 --> 00:07:24,966
We're gonna print every 250 things we do

133
00:07:24,966 --> 00:07:27,836
we'll complain if this is true,

134
00:07:27,836 --> 00:07:31,471
we're gonna go get the
mapping between the senders

135
00:07:31,471 --> 00:07:33,892
which is a way to look up the primary key

136
00:07:33,892 --> 00:07:35,687
I could have done this
with a database thing

137
00:07:35,687 --> 00:07:37,981
but I wanted it to be fast so that's part

138
00:07:37,981 --> 00:07:39,071
of the reason I read
all of these things in,

139
00:07:39,071 --> 00:07:42,169
so I could have those
mappings to be really fast

140
00:07:42,169 --> 00:07:44,151
you'll see this takes a
little while even though

141
00:07:44,151 --> 00:07:49,805
even though I got all the stuff cached.

142
00:07:49,805 --> 00:07:52,081
So then if I don't have a sender id,

143
00:07:52,081 --> 00:07:54,161
meaning that I haven't seen it yet,

144
00:07:54,161 --> 00:07:57,337
then I'm going to do an
insert or ignore into senders

145
00:07:57,337 --> 00:08:00,930
and then I'm gonna do a select
and then you've seen this

146
00:08:00,930 --> 00:08:03,114
where I grab the row
back and I'm really just

147
00:08:03,114 --> 00:08:05,550
trying to look at the recently assigned id

148
00:08:05,550 --> 00:08:11,042
and then I'm going to not
only set the sender id

149
00:08:11,042 --> 00:08:13,699
for this ideration loop but
I'm also gonna store it in

150
00:08:13,699 --> 00:08:17,769
the dictionary, and so that
builds this dictionary up.

151
00:08:17,769 --> 00:08:21,348
And you'll see the same
thing is true for subject id.

152
00:08:21,348 --> 00:08:23,527
I'm gonna insert it
into the subjects table

153
00:08:23,527 --> 00:08:26,174
and get a primary key if
I don't know what it is

154
00:08:26,174 --> 00:08:27,938
and then I'm gonna put it into,

155
00:08:27,938 --> 00:08:30,127
not only am I going to
put it into the database,

156
00:08:30,127 --> 00:08:33,547
but I'm also gonna put
it into my dictionary

157
00:08:33,547 --> 00:08:40,171
and the same thing I guess
I didn't do it for the guid.

158
00:08:40,171 --> 00:08:43,446
So now what I have is the
sender id and the subject id

159
00:08:43,446 --> 00:08:46,340
which are foreign keys
into the center table

160
00:08:46,340 --> 00:08:49,054
and the subject table and
I'm gonna insert the message

161
00:08:49,054 --> 00:08:52,184
with a sender id, subject id, the sent at,

162
00:08:52,184 --> 00:08:56,750
headers, and body.

163
00:08:56,750 --> 00:08:59,196
The values here are the guid, sender id,

164
00:08:59,196 --> 00:09:00,519
subject id, sent at.

165
00:09:00,519 --> 00:09:03,347
Now this here zlib compress,

166
00:09:03,347 --> 00:09:08,638
so what I'm taking is the message,

167
00:09:08,638 --> 00:09:13,061
the header, and the
body, and this little bit

168
00:09:13,061 --> 00:09:15,815
ends up with a compressed
version of this stuff

169
00:09:15,815 --> 00:09:17,085
and you'll see it in a second

170
00:09:17,085 --> 00:09:19,423
and this keeps the size
of these text things down

171
00:09:19,423 --> 00:09:24,155
at the cost of the computation of,

172
00:09:24,155 --> 00:09:27,614
the cost of the computation
to compress and decompress

173
00:09:27,614 --> 00:09:29,894
when we wanna read it okay.

174
00:09:29,894 --> 00:09:33,958
And then I pull the guids out,

175
00:09:33,958 --> 00:09:36,199
the id, which is the guid,

176
00:09:36,199 --> 00:09:39,647
and I pull out the
primary key for this thing

177
00:09:39,647 --> 00:09:46,564
based on the guid and I
update this dictionary.

178
00:09:46,564 --> 00:09:50,639
Let me run that code, it
is doing a lot of clean up.

179
00:09:50,639 --> 00:09:55,919
And I'll tell you it took me
a long time to make this work

180
00:09:55,919 --> 00:09:58,900
so this code that I'm running now, oh.

181
00:09:58,900 --> 00:10:00,283
(laughs)

182
00:10:00,283 --> 00:10:02,885
Don't forget to take a python 3 Chuck.

183
00:10:02,885 --> 00:10:05,492
So you'll, this is gonna run every 250

184
00:10:05,492 --> 00:10:07,463
so it did all this pre-caching

185
00:10:07,463 --> 00:10:09,889
so that's how long it takes to do 250,

186
00:10:09,889 --> 00:10:11,414
now there's 60,000 in here.

187
00:10:11,414 --> 00:10:14,616
And so this is really busy

188
00:10:14,616 --> 00:10:16,408
the reason it's bouncing back and forth

189
00:10:16,408 --> 00:10:18,327
is that every time it
makes this journal file

190
00:10:18,327 --> 00:10:19,855
and then doesn't commit.

191
00:10:19,855 --> 00:10:23,031
So you can kinda see that it's busy

192
00:10:23,031 --> 00:10:25,265
making journal files and
committing and there's

193
00:10:25,265 --> 00:10:27,097
a lot of activity going on here.

194
00:10:27,097 --> 00:10:28,546
(buzz sound)

195
00:10:28,546 --> 00:10:32,973
It so happens that Adam
shows me these files.

196
00:10:32,973 --> 00:10:40,362
(jazz music plays)

197
00:10:40,362 --> 00:10:42,996
Okay so it's finished, it
took about three minutes

198
00:10:42,996 --> 00:10:44,740
to finish that, right,

199
00:10:44,740 --> 00:10:50,552
and so if we take a look
at the size of the files

200
00:10:50,552 --> 00:10:53,302
we will see that the
index is much smaller.

201
00:10:53,302 --> 00:10:55,643
It's fully normalized,

202
00:10:55,643 --> 00:10:59,211
it's still 263 megabites
it's all compressed

203
00:10:59,211 --> 00:11:05,951
so let's take a look
at that in the browser.

204
00:11:05,951 --> 00:11:13,038
So it's 200 megabites, but
it loads up a lot faster.

205
00:11:13,038 --> 00:11:14,900
There we go.

206
00:11:14,900 --> 00:11:17,718
So we have a senders table, right,

207
00:11:17,718 --> 00:11:20,556
which is just kind of a many to one table.

208
00:11:20,556 --> 00:11:24,518
We have a subjects table
which is a many to one table.

209
00:11:24,518 --> 00:11:27,856
And we have messages,
which has foreign keys,

210
00:11:27,856 --> 00:11:33,644
it takes a little bit to load that up.

211
00:11:33,644 --> 00:11:36,234
So we see the foreign keys
for sender and subject

212
00:11:36,234 --> 00:11:39,708
and that saves us, all
those foreign keys save us,

213
00:11:39,708 --> 00:11:42,315
and so we have you can
kinda see that I can't see

214
00:11:42,315 --> 00:11:44,606
the headers and the body
because they're compressed

215
00:11:44,606 --> 00:11:47,847
that saves me a whole
bunch of stuff, right.

216
00:11:47,847 --> 00:11:51,856
It saved me a whole bunch of stuff.

217
00:11:51,856 --> 00:11:56,857
So that's what in that file.

218
00:11:56,857 --> 00:11:59,617
That we've finished this process okay

219
00:11:59,617 --> 00:12:03,223
and we finished modeling the
data and making it really clean

220
00:12:03,223 --> 00:12:05,889
and we'll pick back up,
and the rest of the stuff

221
00:12:05,889 --> 00:12:08,711
we will do is actually
visualizing pulling data out

222
00:12:08,711 --> 00:12:10,234
of index.sqlite.

223
00:12:10,234 --> 00:12:12,513
The idea is this can be restarted,

224
00:12:12,513 --> 00:12:14,100
this can be run over and over and over

225
00:12:14,100 --> 00:12:16,421
even though it takes like
three minutes to run this

226
00:12:16,421 --> 00:12:19,873
that's way better than
five hours to run this.

227
00:12:19,873 --> 00:12:20,881
So three minutes.

228
00:12:20,881 --> 00:12:22,214
Five hours.

229
00:12:22,214 --> 00:12:25,559
And then we'll see now
reading this is in seconds

230
00:12:25,559 --> 00:12:27,600
cause we got it all nice and normalized

231
00:12:27,600 --> 00:12:29,555
in a quite pretty way.

232
00:12:29,555 --> 00:12:31,769
So I hope this has been useful,

233
00:12:31,769 --> 00:12:37,070
in the next one we'll
actually do the visualization.

234
00:12:37,070 --> 00:12:41,237
(jazz music plays)

