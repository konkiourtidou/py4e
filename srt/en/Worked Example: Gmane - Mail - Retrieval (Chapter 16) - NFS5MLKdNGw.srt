1
00:00:01,929 --> 00:00:08,194
(instrumental jazz)

2
00:00:08,194 --> 00:00:09,046
- [Charles] Hello everybody.

3
00:00:09,046 --> 00:00:10,469
Welcome to Python for Everybody.

4
00:00:10,469 --> 00:00:11,959
We're doing some code walk-throughs.

5
00:00:11,959 --> 00:00:13,462
If you wanna get the source code

6
00:00:13,462 --> 00:00:15,942
you can take a look at the sample code

7
00:00:15,942 --> 00:00:18,997
and download it and work through it.

8
00:00:18,997 --> 00:00:21,437
So what we're working on now

9
00:00:21,437 --> 00:00:27,288
is doing some retrieval and
visualization of email data.

10
00:00:27,288 --> 00:00:28,713
It's kind of ironic.

11
00:00:28,713 --> 00:00:34,161
We are going to now
look at the email data,

12
00:00:34,161 --> 00:00:36,594
look at the email data
that we started with.

13
00:00:36,594 --> 00:00:41,586
It's the same Sakai
developer list email data.

14
00:00:41,586 --> 00:00:43,977
There's this service called Gmane.

15
00:00:43,977 --> 00:00:47,928
And Gmane archives developer
lists and various email lists.

16
00:00:47,928 --> 00:00:49,387
And I've made a copy of their data

17
00:00:49,387 --> 00:00:53,045
because all the students in
my class hitting the same,

18
00:00:53,045 --> 00:00:55,730
their server with their
API would crush it.

19
00:00:55,730 --> 00:00:56,869
So in order to be a nice guy

20
00:00:56,869 --> 00:00:58,944
I put up a much more powerful server

21
00:00:58,944 --> 00:01:03,056
with just the data from this one list.

22
00:01:03,056 --> 00:01:04,842
And it's about a gigabyte of data.

23
00:01:04,842 --> 00:01:08,826
So be real careful if
you're paying for network.

24
00:01:08,826 --> 00:01:10,413
So the basic process
we're gonna go through

25
00:01:10,413 --> 00:01:12,706
is we're gonna have a Spydering process

26
00:01:12,706 --> 00:01:15,307
that's a simple, restartable,

27
00:01:15,307 --> 00:01:19,819
focused on the network
problems, data pulling,

28
00:01:19,819 --> 00:01:21,366
to pull content on sqlite.

29
00:01:21,366 --> 00:01:23,359
There's gonna be a database there.

30
00:01:23,359 --> 00:01:25,112
And then we're gonna
have a cleanup process.

31
00:01:25,112 --> 00:01:27,912
This database is gonna get
large, about a gigabyte.

32
00:01:27,912 --> 00:01:28,933
And then we're gonna have a process

33
00:01:28,933 --> 00:01:31,322
that kind of grinds through this data.

34
00:01:31,322 --> 00:01:34,228
It takes a while.

35
00:01:34,228 --> 00:01:36,975
And then it's gonna read this mapping.

36
00:01:36,975 --> 00:01:37,808
And I'll show you that when it comes

37
00:01:37,808 --> 00:01:39,701
because things like
people's names have changed

38
00:01:39,701 --> 00:01:41,289
over all these years.

39
00:01:41,289 --> 00:01:42,122
And it doesn't cleanup.

40
00:01:42,122 --> 00:01:43,697
It makes a really nice

41
00:01:43,697 --> 00:01:46,581
highly relational version of this data.

42
00:01:46,581 --> 00:01:48,020
And then we visualize from here.

43
00:01:48,020 --> 00:01:52,208
So this could take you
several days to finish this.

44
00:01:52,208 --> 00:01:54,972
This will take like a few minutes to run.

45
00:01:54,972 --> 00:01:57,212
And then this'll just take seconds to run.

46
00:01:57,212 --> 00:02:00,666
So this is a multi-step process

47
00:02:00,666 --> 00:02:02,780
where if you were doing something

48
00:02:02,780 --> 00:02:04,079
like running something for two days

49
00:02:04,079 --> 00:02:05,785
to produce a visualization,

50
00:02:05,785 --> 00:02:07,818
and it blew up 3/4 of the way through,

51
00:02:07,818 --> 00:02:08,814
it wouldn't be good.

52
00:02:08,814 --> 00:02:11,251
So that's why we break
this into simple parts.

53
00:02:11,251 --> 00:02:13,199
But right now we're just gonna focus

54
00:02:13,199 --> 00:02:15,439
on this part right here.

55
00:02:15,439 --> 00:02:21,091
And take a look at the mail bit.

56
00:02:21,091 --> 00:02:22,922
The mail bit, we retrieve the mail.

57
00:02:22,922 --> 00:02:25,323
And then we'll have another video

58
00:02:25,323 --> 00:02:29,408
to talk about the rest of this stuff.

59
00:02:29,408 --> 00:02:33,943
So let's take a look at the code.

60
00:02:33,943 --> 00:02:35,813
So here is gmane.py

61
00:02:35,813 --> 00:02:39,154
that is the basic code.

62
00:02:39,154 --> 00:02:41,589
Hopefully this stuff is
starting to look familiar.

63
00:02:41,589 --> 00:02:42,422
The thing that's weird here

64
00:02:42,422 --> 00:02:44,535
is we gotta do some daytime parsing.

65
00:02:44,535 --> 00:02:46,206
And there is code that's out there

66
00:02:46,206 --> 00:02:47,451
but you may have to install it.

67
00:02:47,451 --> 00:02:52,555
And I had to write my code
in a way that didn't assume

68
00:02:52,555 --> 00:02:54,714
that you could install the daytime parser.

69
00:02:54,714 --> 00:02:55,978
And so it has it even.

70
00:02:55,978 --> 00:02:58,626
If that's not there it uses
my own date time parser

71
00:02:58,626 --> 00:02:59,523
and that's what this code is.

72
00:02:59,523 --> 00:03:03,138
Don't worry too much about that.

73
00:03:03,138 --> 00:03:03,971
And of course we have to deal

74
00:03:03,971 --> 00:03:08,834
with the blackout
certificates inside of Python.

75
00:03:08,834 --> 00:03:11,666
And so we start things out.

76
00:03:11,666 --> 00:03:13,980
And this is really a simple table.

77
00:03:13,980 --> 00:03:17,887
We've got a messages table
that's got a primary key.

78
00:03:17,887 --> 00:03:20,366
The email itself, when it was sent,

79
00:03:20,366 --> 00:03:25,484
what the subject, and the
headers, and the body.

80
00:03:25,484 --> 00:03:27,839
And so what we're going to do is

81
00:03:27,839 --> 00:03:29,589
because we have to pick
up where we left off.

82
00:03:29,589 --> 00:03:35,931
We're going to select
the largest primary key

83
00:03:35,931 --> 00:03:37,438
from the messages table.

84
00:03:37,438 --> 00:03:39,310
And retrieve that.

85
00:03:39,310 --> 00:03:44,593
And then we're gonna go
to the one after that.

86
00:03:44,593 --> 00:03:47,933
And so we know what the ID is.

87
00:03:47,933 --> 00:03:51,307
And we're gonna pick up where we left off.

88
00:03:51,307 --> 00:03:53,097
And so we have a starting point.

89
00:03:53,097 --> 00:03:55,939
That starts either zero or one.

90
00:03:55,939 --> 00:03:59,398
And we're gonna ask how
many messages to retrieve.

91
00:03:59,398 --> 00:04:01,839
Got some counters.

92
00:04:01,839 --> 00:04:05,993
So we're gonna say C if
select ID from messages

93
00:04:05,993 --> 00:04:08,109
where ID equals whatever that starting is.

94
00:04:08,109 --> 00:04:11,620
It's the highest number we've seen so far.

95
00:04:11,620 --> 00:04:15,379
And if we got, if row is not none,

96
00:04:15,379 --> 00:04:16,212
that means we've already retrieved

97
00:04:16,212 --> 00:04:19,781
this particular email message.

98
00:04:19,781 --> 00:04:21,208
Otherwise we're gonna keep on going

99
00:04:21,208 --> 00:04:22,060
and we're in good shape.

100
00:04:22,060 --> 00:04:24,459
And this is one that we want to retrieve.

101
00:04:24,459 --> 00:04:26,616
And we're subtracting that so we know.

102
00:04:26,616 --> 00:04:28,445
And so this is the base URL.

103
00:04:28,445 --> 00:04:33,168
This is the URL of our API,

104
00:04:33,168 --> 00:04:34,739
the one that I,

105
00:04:34,739 --> 00:04:37,626
I have a nice copy of all this data

106
00:04:37,626 --> 00:04:41,655
on a server that's accessible
worldwide and won't crash.

107
00:04:41,655 --> 00:04:43,513
So the format is you can say

108
00:04:43,513 --> 00:04:47,394
I would like the email
address for one to two,

109
00:04:47,394 --> 00:04:54,495
or from 100, oops.

110
00:04:54,495 --> 00:04:59,032
From 102, 101.

111
00:04:59,032 --> 00:05:00,740
Message 101 to 102.

112
00:05:00,740 --> 00:05:02,940
We can just kind of walk
through these things.

113
00:05:02,940 --> 00:05:05,339
So that's the message ID.

114
00:05:05,339 --> 00:05:10,880
And so if we're going to make the URL,

115
00:05:10,880 --> 00:05:13,352
we're gonna take the base URL,

116
00:05:13,352 --> 00:05:14,326
add the starting address,

117
00:05:14,326 --> 00:05:15,626
and then add plus one.

118
00:05:15,626 --> 00:05:17,915
So we got the slash at the
end of the starting address.

119
00:05:17,915 --> 00:05:22,026
And so that's how we form those.

120
00:05:22,026 --> 00:05:24,796
And we're gonna retrieve that.

121
00:05:24,796 --> 00:05:26,768
And we're gonna decode it.

122
00:05:26,768 --> 00:05:27,986
We've seen this in some other ones.

123
00:05:27,986 --> 00:05:30,995
We're gonna check to see
if we got legit data.

124
00:05:30,995 --> 00:05:34,652
If not, like 404 not
found or something else

125
00:05:34,652 --> 00:05:37,053
we're gonna quit.

126
00:05:37,053 --> 00:05:40,080
If someone hits control
c which is our control z,

127
00:05:40,080 --> 00:05:42,719
we get the program to
interrupt, then we'll stop.

128
00:05:42,719 --> 00:05:46,787
If there's some other problem,

129
00:05:46,787 --> 00:05:50,080
we're going to complain and keep going.

130
00:05:50,080 --> 00:05:52,049
And if we have five failures
in a row we're gonna quit.

131
00:05:52,049 --> 00:05:52,946
But it will just keep on going.

132
00:05:52,946 --> 00:05:56,505
'Cause these things do
have glitchy bits here.

133
00:05:56,505 --> 00:05:57,522
And so at this point,

134
00:05:57,522 --> 00:05:58,581
if we've made it this far.

135
00:05:58,581 --> 00:06:00,161
We retrieve the URL,

136
00:06:00,161 --> 00:06:02,931
and we've got the number
of characters we retrieved.

137
00:06:02,931 --> 00:06:05,571
And if we get bad data,

138
00:06:05,571 --> 00:06:07,118
if it doesn't start with from,

139
00:06:07,118 --> 00:06:09,429
'cause this is a mail message.

140
00:06:09,429 --> 00:06:12,201
And they all start with from space.

141
00:06:12,201 --> 00:06:17,283
If it's right, it starts with from space.

142
00:06:17,283 --> 00:06:21,520
Then what we're going to tolerate
up to five failures there

143
00:06:21,520 --> 00:06:22,860
for bad data.

144
00:06:22,860 --> 00:06:24,328
'Cause it could be bad.

145
00:06:24,328 --> 00:06:25,348
And then we're gonna find a blank line

146
00:06:25,348 --> 00:06:27,420
'cause that's the new line
at the end of one line.

147
00:06:27,420 --> 00:06:28,841
And then a blank line.

148
00:06:28,841 --> 00:06:31,933
And then we're gonna take and
break this into the headers.

149
00:06:31,933 --> 00:06:33,109
The mail headers,

150
00:06:33,109 --> 00:06:37,254
which the mail headers
is this stuff right here.

151
00:06:37,254 --> 00:06:39,285
Up to but not including the blank line.

152
00:06:39,285 --> 00:06:45,426
And then the body is
everything after that.

153
00:06:45,426 --> 00:06:48,357
So we'll just break that into pieces.

154
00:06:48,357 --> 00:06:51,895
Otherwise we'll complain and
tolerate up to five characters.

155
00:06:51,895 --> 00:06:54,459
And then we're gonna use
a regular expression,

156
00:06:54,459 --> 00:06:56,095
kind of from the regular
expressions chapter

157
00:06:56,095 --> 00:06:59,546
to pull out an email address

158
00:06:59,546 --> 00:07:03,867
from the from colon line
somewhere in these headers.

159
00:07:03,867 --> 00:07:06,018
From colon right there.

160
00:07:06,018 --> 00:07:08,211
It's gonna go find a less than,

161
00:07:08,211 --> 00:07:10,455
and then, oops.

162
00:07:10,455 --> 00:07:12,404
Hold this stuff out up to it.

163
00:07:12,404 --> 00:07:14,087
So you got the left stand,

164
00:07:14,087 --> 00:07:15,371
you got the parenthesis,

165
00:07:15,371 --> 00:07:17,652
you got one or more non-blank characters

166
00:07:17,652 --> 00:07:18,485
followed by an at sign,

167
00:07:18,485 --> 00:07:20,580
followed by one and characters.

168
00:07:20,580 --> 00:07:22,859
And we'll get back a list of those.

169
00:07:22,859 --> 00:07:25,627
We should only get one.

170
00:07:25,627 --> 00:07:28,192
If we find one we're gonna grab the email.

171
00:07:28,192 --> 00:07:30,878
We're gonna strip the lower case.

172
00:07:30,878 --> 00:07:33,970
And if we've got some little
nasty less-than sign in there

173
00:07:33,970 --> 00:07:36,004
we'll tolerate that as well.

174
00:07:36,004 --> 00:07:37,318
So this is kind of cleanup,

175
00:07:37,318 --> 00:07:38,151
and you get used to this,

176
00:07:38,151 --> 00:07:40,018
where you're like oh how come
all those email addresses

177
00:07:40,018 --> 00:07:43,726
have this other stuff in them?

178
00:07:43,726 --> 00:07:45,308
And then we also look for it

179
00:07:45,308 --> 00:07:48,517
if there are no less than signs.

180
00:07:48,517 --> 00:07:49,898
And we do this way, that's different,

181
00:07:49,898 --> 00:07:55,020
some mail messages have
it this way and others.

182
00:07:55,020 --> 00:07:57,747
Again you write this code
after you watch it for a while

183
00:07:57,747 --> 00:08:00,161
like oh it's crapped out
and giving me bad stuff.

184
00:08:00,161 --> 00:08:02,679
And I make them all lower
case so they match better

185
00:08:02,679 --> 00:08:04,187
and get rid of bad characters.

186
00:08:04,187 --> 00:08:06,423
Now I got an email address.

187
00:08:06,423 --> 00:08:09,515
Then what I do is I look
for the date of this.

188
00:08:09,515 --> 00:08:11,594
I'm gonna add these by dates.

189
00:08:11,594 --> 00:08:12,835
So I look for this line

190
00:08:12,835 --> 00:08:17,742
and use a regular
expression to pull that out.

191
00:08:17,742 --> 00:08:18,758
So I'm looking for a date

192
00:08:18,758 --> 00:08:19,651
followed by a blank

193
00:08:19,651 --> 00:08:21,197
followed by any number of characters

194
00:08:21,197 --> 00:08:25,142
followed by a comma.

195
00:08:25,142 --> 00:08:27,457
So I'm not interested
in this Wednesday bit,

196
00:08:27,457 --> 00:08:30,342
so I'm skipping that bit right there.

197
00:08:30,342 --> 00:08:34,283
And going and grabbing everything
after that comma space.

198
00:08:34,283 --> 00:08:38,481
So it's really here to
the end of the line.

199
00:08:38,481 --> 00:08:39,580
So that's the new line.

200
00:08:39,580 --> 00:08:41,657
It's going all the way.

201
00:08:41,657 --> 00:08:43,164
It's gonna pull this bit right here.

202
00:08:43,164 --> 00:08:44,996
That's the text.

203
00:08:44,996 --> 00:08:46,543
And this is where we're going to say

204
00:08:46,543 --> 00:08:48,657
oh that's kind of a funky looking date

205
00:08:48,657 --> 00:08:50,003
and we want to standardize that date

206
00:08:50,003 --> 00:08:56,013
so we're gonna, let's see.

207
00:08:56,013 --> 00:08:59,433
We're gonna chop it off
at the 26 character.

208
00:08:59,433 --> 00:09:01,916
I don't know why do we
care about the 26 character

209
00:09:01,916 --> 00:09:04,594
but we chop that off the 26 character.

210
00:09:04,594 --> 00:09:05,813
And then we're gonna parse it.

211
00:09:05,813 --> 00:09:09,026
And that's gonna give us
back a nice clean date,

212
00:09:09,026 --> 00:09:11,302
sent at date.

213
00:09:11,302 --> 00:09:12,522
We're gonna complete,

214
00:09:12,522 --> 00:09:14,024
we're gonna quit.

215
00:09:14,024 --> 00:09:15,281
And can't parse it.

216
00:09:15,281 --> 00:09:19,634
Then we're gonna tolerate five
bad email addresses in a row.

217
00:09:19,634 --> 00:09:21,177
Then we're looking for the subject line

218
00:09:21,177 --> 00:09:23,822
using another regular expression.

219
00:09:23,822 --> 00:09:26,178
Subject line, regular expression,

220
00:09:26,178 --> 00:09:27,646
that's pretty easy.

221
00:09:27,646 --> 00:09:28,826
Up to but not including,

222
00:09:28,826 --> 00:09:31,266
there's a blank there.

223
00:09:31,266 --> 00:09:39,233
It's subject.

224
00:09:39,233 --> 00:09:40,066
We pull that out.

225
00:09:40,066 --> 00:09:41,634
We get the subject.

226
00:09:41,634 --> 00:09:42,896
Now at this point we parsed it.

227
00:09:42,896 --> 00:09:45,014
We got good stuff so we
reset the fail counter

228
00:09:45,014 --> 00:09:46,198
'cause I kept saying

229
00:09:46,198 --> 00:09:49,697
if you fail five straight times you quit.

230
00:09:49,697 --> 00:09:51,162
And we're gonna print it out,

231
00:09:51,162 --> 00:09:52,992
and then we're just
gonna insert that stuff.

232
00:09:52,992 --> 00:09:55,718
We've got the ID of the message,

233
00:09:55,718 --> 00:09:57,951
which we've got,

234
00:09:57,951 --> 00:10:00,145
the email address that it came from.

235
00:10:00,145 --> 00:10:00,997
The time it was sent.

236
00:10:00,997 --> 00:10:04,337
The subject, and then basically
the headers and the body.

237
00:10:04,337 --> 00:10:05,640
Now we're just inserting it.

238
00:10:05,640 --> 00:10:08,081
And now we're gonna say every
50th we're gonna commit it.

239
00:10:08,081 --> 00:10:09,750
So that speeds things up.

240
00:10:09,750 --> 00:10:11,785
And every 100th we're gonna wait a second.

241
00:10:11,785 --> 00:10:14,428
So that's, count is going up, up, up, up.

242
00:10:14,428 --> 00:10:17,839
And every 50th you'll see it pause.

243
00:10:17,839 --> 00:10:21,295
And then every 100th
it'll pause for a second.

244
00:10:21,295 --> 00:10:23,289
Mostly that's to let me hit control c

245
00:10:23,289 --> 00:10:27,193
or to not overload any server.

246
00:10:27,193 --> 00:10:29,636
Okay so that's the simple one.

247
00:10:29,636 --> 00:10:31,540
The problem is that the
data just gets ugly.

248
00:10:31,540 --> 00:10:34,228
And so you'll find yourself
wanting to reset this

249
00:10:34,228 --> 00:10:35,061
and start it over.

250
00:10:35,061 --> 00:10:38,542
This one's gonna work of course.

251
00:10:38,542 --> 00:10:41,388
But these are hard to build.

252
00:10:41,388 --> 00:10:45,220
And that's why it's a good idea, oops.

253
00:10:45,220 --> 00:10:48,039
Python.

254
00:10:48,039 --> 00:10:51,374
3gmane.py

255
00:10:51,374 --> 00:10:52,876
How many messages?

256
00:10:52,876 --> 00:10:56,048
Well let's just do one.

257
00:10:56,048 --> 00:10:57,635
Okay so it went and grabbed,

258
00:10:57,635 --> 00:11:00,604
oh do I have this already running?

259
00:11:00,604 --> 00:11:04,547
51 through 52, let me start over.

260
00:11:04,547 --> 00:11:08,113
Let's run a cell, start sqlite.

261
00:11:08,113 --> 00:11:09,467
Okay RM content,

262
00:11:09,467 --> 00:11:11,910
I must have run it to test it.

263
00:11:11,910 --> 00:11:13,899
So let's run it again.

264
00:11:13,899 --> 00:11:15,856
Python gmane.py

265
00:11:15,856 --> 00:11:17,930
and ask for one message.

266
00:11:17,930 --> 00:11:20,368
Okay so there we went and got message one

267
00:11:20,368 --> 00:11:21,261
from one to two.

268
00:11:21,261 --> 00:11:23,460
We got 2662 characters.

269
00:11:23,460 --> 00:11:24,844
And we printed out the email address.

270
00:11:24,844 --> 00:11:26,959
The time we got it after all that hacking.

271
00:11:26,959 --> 00:11:28,268
And the subject line.

272
00:11:28,268 --> 00:11:30,304
That's what we got.

273
00:11:30,304 --> 00:11:32,984
So if we take a look at the database,

274
00:11:32,984 --> 00:11:38,428
and we go into Gmane,

275
00:11:38,428 --> 00:11:40,136
any time you see the
content sqlite journal

276
00:11:40,136 --> 00:11:43,303
that means it needed to run a commit

277
00:11:43,303 --> 00:11:44,136
And it hasn't run a commit,

278
00:11:44,136 --> 00:11:46,286
but I'll hit enter and
that will do the commit.

279
00:11:46,286 --> 00:11:47,839
And you see that vanish.

280
00:11:47,839 --> 00:11:49,793
So now I can open it.

281
00:11:49,793 --> 00:11:55,358
And I take a look at,

282
00:11:55,358 --> 00:11:57,273
how come there's no messages?

283
00:11:57,273 --> 00:12:00,570
That will not get stored
in there for some reason.

284
00:12:00,570 --> 00:12:06,099
Needs to refresh.

285
00:12:06,099 --> 00:12:11,266
Let's run it again.

286
00:12:11,266 --> 00:12:13,012
Maybe it didn't commit.

287
00:12:13,012 --> 00:12:18,025
We've got a bug in it.

288
00:12:18,025 --> 00:12:26,040
Let's make a change to the code.

289
00:12:26,040 --> 00:12:30,841
I'm going to, see this
connection dot commit.

290
00:12:30,841 --> 00:12:33,281
See that?

291
00:12:33,281 --> 00:12:37,314
Connection dot commit.

292
00:12:37,314 --> 00:12:39,184
Gonna commit there.

293
00:12:39,184 --> 00:12:40,645
And the other thing I'm
gonna do is every time

294
00:12:40,645 --> 00:12:43,819
I stop to read,

295
00:12:43,819 --> 00:12:46,102
I'm gonna commit right before I read it.

296
00:12:46,102 --> 00:12:48,182
So I think we should, I
hope that doesn't blow up.

297
00:12:48,182 --> 00:12:49,015
We'll see.

298
00:12:49,015 --> 00:12:51,751
So the idea is if I wanna stop,

299
00:12:51,751 --> 00:12:53,138
I want it committed.

300
00:12:53,138 --> 00:12:54,274
So let's do this.

301
00:12:54,274 --> 00:12:57,122
Let's do one message.

302
00:12:57,122 --> 00:12:58,505
And now I should hit,

303
00:12:58,505 --> 00:12:59,683
is it commit it.

304
00:12:59,683 --> 00:13:01,825
Now that I've put the commits in,

305
00:13:01,825 --> 00:13:07,176
I think that it will look better.

306
00:13:07,176 --> 00:13:10,353
Refresh and so there it
is 'cause I committed it.

307
00:13:10,353 --> 00:13:12,429
And I don't have the general file,

308
00:13:12,429 --> 00:13:13,405
so that's good.

309
00:13:13,405 --> 00:13:15,558
So that's a good idea,
put those commits there.

310
00:13:15,558 --> 00:13:17,592
So I'll just leave those commits in.

311
00:13:17,592 --> 00:13:20,562
When you download it it'll
have those commits in there.

312
00:13:20,562 --> 00:13:22,881
So again I put a commit here,

313
00:13:22,881 --> 00:13:28,242
and a commit at the very
very end to make sure.

314
00:13:28,242 --> 00:13:31,171
So I missed that.

315
00:13:31,171 --> 00:13:33,204
But now we get one.

316
00:13:33,204 --> 00:13:34,633
And so let's just run it again.

317
00:13:34,633 --> 00:13:37,559
And you'll see how by
selecting the max of the ID,

318
00:13:37,559 --> 00:13:38,780
it's gonna select the max of this.

319
00:13:38,780 --> 00:13:42,716
And then add one to it so
it doesn't do the next one.

320
00:13:42,716 --> 00:13:45,358
So if I run it again,

321
00:13:45,358 --> 00:13:46,534
I say give me one message.

322
00:13:46,534 --> 00:13:48,362
So it goes two to three.

323
00:13:48,362 --> 00:13:51,609
And give me two messages.

324
00:13:51,609 --> 00:13:54,131
So I hit enter, and I can do refresh.

325
00:13:54,131 --> 00:13:57,473
And now you see we've got four messages.

326
00:13:57,473 --> 00:14:00,072
And so let's just fire this baby up.

327
00:14:00,072 --> 00:14:02,267
Tell it to get 100.

328
00:14:02,267 --> 00:14:06,176
Run, run, run, run, run, run, run.

329
00:14:06,176 --> 00:14:09,352
It just goes and goes and
it pauses once in a while

330
00:14:09,352 --> 00:14:10,410
to do a commit.

331
00:14:10,410 --> 00:14:12,643
And if I made a commit every time,

332
00:14:12,643 --> 00:14:14,556
oops it just paused there.

333
00:14:14,556 --> 00:14:15,613
Now it finished.

334
00:14:15,613 --> 00:14:22,317
So this'll run and we
will get a bunch of data.

335
00:14:22,317 --> 00:14:24,025
The problem is is if I just run this,

336
00:14:24,025 --> 00:14:27,649
it'll take about five hours.

337
00:14:27,649 --> 00:14:29,030
To run this and get this all.

338
00:14:29,030 --> 00:14:30,660
And I have a really fast connection.

339
00:14:30,660 --> 00:14:34,531
So I have got a file
that you can download.

340
00:14:34,531 --> 00:14:36,320
Let's go find it.

341
00:14:36,320 --> 00:14:38,149
Let's see if I can,

342
00:14:38,149 --> 00:14:40,178
we'll see how long it'll
take me to download this.

343
00:14:40,178 --> 00:14:43,246
I've got a file that you
can download and save.

344
00:14:43,246 --> 00:14:47,359
Now I'm gonna use the command line.

345
00:14:47,359 --> 00:14:51,427
Curl or wget is another
command that we Linux

346
00:14:51,427 --> 00:14:53,374
and Mac people can use.

347
00:14:53,374 --> 00:14:55,585
Or not, you all might have
to use your browser to do it.

348
00:14:55,585 --> 00:14:58,798
Let's see how long this is gonna take.

349
00:14:58,798 --> 00:15:00,223
Retrieving.

350
00:15:00,223 --> 00:15:02,072
Minute three.

351
00:15:02,072 --> 00:15:07,513
Well I'll just wait and just come back.

352
00:15:07,513 --> 00:15:26,619
(instrumental jazz)

353
00:15:26,619 --> 00:15:28,811
Okay so now that's done.

354
00:15:28,811 --> 00:15:31,495
I was averaging 10 megabits a second.

355
00:15:31,495 --> 00:15:33,567
I downloaded about 600 megabytes,

356
00:15:33,567 --> 00:15:35,642
10 megabits a second.

357
00:15:35,642 --> 00:15:39,181
That will probably be slower for you.

358
00:15:39,181 --> 00:15:40,887
So now if I take a look,

359
00:15:40,887 --> 00:15:46,321
you're gonna find that
that content dot sqlite

360
00:15:46,321 --> 00:15:49,409
is 624 megabytes.

361
00:15:49,409 --> 00:15:51,602
Now what happens is
I've pre-Spydered this.

362
00:15:51,602 --> 00:15:54,490
So now if you run gmane.py

363
00:15:54,490 --> 00:15:56,892
and it asks for five more messages,

364
00:15:56,892 --> 00:16:00,178
it will pick up where I left that one off.

365
00:16:00,178 --> 00:16:03,020
So it's up to message 59,000.

366
00:16:03,020 --> 00:16:05,662
And I think that, oh we saw an error.

367
00:16:05,662 --> 00:16:06,757
Saw a bug in that one.

368
00:16:06,757 --> 00:16:08,020
I don't know what's wrong with that one.

369
00:16:08,020 --> 00:16:09,971
So let's see if,

370
00:16:09,971 --> 00:16:12,364
so at this point we're
gonna have most of the data.

371
00:16:12,364 --> 00:16:16,436
It might find its way to the very end.

372
00:16:16,436 --> 00:16:19,569
Once you get this it should
be not too much more.

373
00:16:19,569 --> 00:16:25,269
Maybe it's like 63,000 or something.

374
00:16:25,269 --> 00:16:28,235
So what we'll do is we will let that run.

375
00:16:28,235 --> 00:16:32,752
And we will come back
when that one's finished.

376
00:16:32,752 --> 00:16:37,673
And run the next phase after
it's got all of its data.

377
00:16:37,673 --> 00:16:41,411
So thanks for listening.

378
00:16:41,411 --> 00:16:44,411
(instrumental jazz)

